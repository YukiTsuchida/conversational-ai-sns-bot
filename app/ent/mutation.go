// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/YukiTsuchida/conversational-ai-sns-bot/app/ent/chatgpt35turboconversationlog"
	"github.com/YukiTsuchida/conversational-ai-sns-bot/app/ent/conversations"
	"github.com/YukiTsuchida/conversational-ai-sns-bot/app/ent/predicate"
	"github.com/YukiTsuchida/conversational-ai-sns-bot/app/ent/twitteraccounts"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeChatgpt35TurboConversationLog = "Chatgpt35TurboConversationLog"
	TypeConversations                 = "Conversations"
	TypeTwitterAccounts               = "TwitterAccounts"
)

// Chatgpt35TurboConversationLogMutation represents an operation that mutates the Chatgpt35TurboConversationLog nodes in the graph.
type Chatgpt35TurboConversationLogMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	message             *string
	purpose             *string
	role                *chatgpt35turboconversationlog.Role
	created_at          *time.Time
	clearedFields       map[string]struct{}
	conversation        *int
	clearedconversation bool
	done                bool
	oldValue            func(context.Context) (*Chatgpt35TurboConversationLog, error)
	predicates          []predicate.Chatgpt35TurboConversationLog
}

var _ ent.Mutation = (*Chatgpt35TurboConversationLogMutation)(nil)

// chatgpt35turboconversationlogOption allows management of the mutation configuration using functional options.
type chatgpt35turboconversationlogOption func(*Chatgpt35TurboConversationLogMutation)

// newChatgpt35TurboConversationLogMutation creates new mutation for the Chatgpt35TurboConversationLog entity.
func newChatgpt35TurboConversationLogMutation(c config, op Op, opts ...chatgpt35turboconversationlogOption) *Chatgpt35TurboConversationLogMutation {
	m := &Chatgpt35TurboConversationLogMutation{
		config:        c,
		op:            op,
		typ:           TypeChatgpt35TurboConversationLog,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChatgpt35TurboConversationLogID sets the ID field of the mutation.
func withChatgpt35TurboConversationLogID(id int) chatgpt35turboconversationlogOption {
	return func(m *Chatgpt35TurboConversationLogMutation) {
		var (
			err   error
			once  sync.Once
			value *Chatgpt35TurboConversationLog
		)
		m.oldValue = func(ctx context.Context) (*Chatgpt35TurboConversationLog, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Chatgpt35TurboConversationLog.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChatgpt35TurboConversationLog sets the old Chatgpt35TurboConversationLog of the mutation.
func withChatgpt35TurboConversationLog(node *Chatgpt35TurboConversationLog) chatgpt35turboconversationlogOption {
	return func(m *Chatgpt35TurboConversationLogMutation) {
		m.oldValue = func(context.Context) (*Chatgpt35TurboConversationLog, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m Chatgpt35TurboConversationLogMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m Chatgpt35TurboConversationLogMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *Chatgpt35TurboConversationLogMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *Chatgpt35TurboConversationLogMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Chatgpt35TurboConversationLog.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMessage sets the "message" field.
func (m *Chatgpt35TurboConversationLogMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *Chatgpt35TurboConversationLogMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the Chatgpt35TurboConversationLog entity.
// If the Chatgpt35TurboConversationLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Chatgpt35TurboConversationLogMutation) OldMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ResetMessage resets all changes to the "message" field.
func (m *Chatgpt35TurboConversationLogMutation) ResetMessage() {
	m.message = nil
}

// SetPurpose sets the "purpose" field.
func (m *Chatgpt35TurboConversationLogMutation) SetPurpose(s string) {
	m.purpose = &s
}

// Purpose returns the value of the "purpose" field in the mutation.
func (m *Chatgpt35TurboConversationLogMutation) Purpose() (r string, exists bool) {
	v := m.purpose
	if v == nil {
		return
	}
	return *v, true
}

// OldPurpose returns the old "purpose" field's value of the Chatgpt35TurboConversationLog entity.
// If the Chatgpt35TurboConversationLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Chatgpt35TurboConversationLogMutation) OldPurpose(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPurpose is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPurpose requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPurpose: %w", err)
	}
	return oldValue.Purpose, nil
}

// ClearPurpose clears the value of the "purpose" field.
func (m *Chatgpt35TurboConversationLogMutation) ClearPurpose() {
	m.purpose = nil
	m.clearedFields[chatgpt35turboconversationlog.FieldPurpose] = struct{}{}
}

// PurposeCleared returns if the "purpose" field was cleared in this mutation.
func (m *Chatgpt35TurboConversationLogMutation) PurposeCleared() bool {
	_, ok := m.clearedFields[chatgpt35turboconversationlog.FieldPurpose]
	return ok
}

// ResetPurpose resets all changes to the "purpose" field.
func (m *Chatgpt35TurboConversationLogMutation) ResetPurpose() {
	m.purpose = nil
	delete(m.clearedFields, chatgpt35turboconversationlog.FieldPurpose)
}

// SetRole sets the "role" field.
func (m *Chatgpt35TurboConversationLogMutation) SetRole(c chatgpt35turboconversationlog.Role) {
	m.role = &c
}

// Role returns the value of the "role" field in the mutation.
func (m *Chatgpt35TurboConversationLogMutation) Role() (r chatgpt35turboconversationlog.Role, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the Chatgpt35TurboConversationLog entity.
// If the Chatgpt35TurboConversationLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Chatgpt35TurboConversationLogMutation) OldRole(ctx context.Context) (v chatgpt35turboconversationlog.Role, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ResetRole resets all changes to the "role" field.
func (m *Chatgpt35TurboConversationLogMutation) ResetRole() {
	m.role = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *Chatgpt35TurboConversationLogMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *Chatgpt35TurboConversationLogMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Chatgpt35TurboConversationLog entity.
// If the Chatgpt35TurboConversationLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *Chatgpt35TurboConversationLogMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *Chatgpt35TurboConversationLogMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetConversationID sets the "conversation" edge to the Conversations entity by id.
func (m *Chatgpt35TurboConversationLogMutation) SetConversationID(id int) {
	m.conversation = &id
}

// ClearConversation clears the "conversation" edge to the Conversations entity.
func (m *Chatgpt35TurboConversationLogMutation) ClearConversation() {
	m.clearedconversation = true
}

// ConversationCleared reports if the "conversation" edge to the Conversations entity was cleared.
func (m *Chatgpt35TurboConversationLogMutation) ConversationCleared() bool {
	return m.clearedconversation
}

// ConversationID returns the "conversation" edge ID in the mutation.
func (m *Chatgpt35TurboConversationLogMutation) ConversationID() (id int, exists bool) {
	if m.conversation != nil {
		return *m.conversation, true
	}
	return
}

// ConversationIDs returns the "conversation" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ConversationID instead. It exists only for internal usage by the builders.
func (m *Chatgpt35TurboConversationLogMutation) ConversationIDs() (ids []int) {
	if id := m.conversation; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetConversation resets all changes to the "conversation" edge.
func (m *Chatgpt35TurboConversationLogMutation) ResetConversation() {
	m.conversation = nil
	m.clearedconversation = false
}

// Where appends a list predicates to the Chatgpt35TurboConversationLogMutation builder.
func (m *Chatgpt35TurboConversationLogMutation) Where(ps ...predicate.Chatgpt35TurboConversationLog) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the Chatgpt35TurboConversationLogMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *Chatgpt35TurboConversationLogMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Chatgpt35TurboConversationLog, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *Chatgpt35TurboConversationLogMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *Chatgpt35TurboConversationLogMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Chatgpt35TurboConversationLog).
func (m *Chatgpt35TurboConversationLogMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *Chatgpt35TurboConversationLogMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.message != nil {
		fields = append(fields, chatgpt35turboconversationlog.FieldMessage)
	}
	if m.purpose != nil {
		fields = append(fields, chatgpt35turboconversationlog.FieldPurpose)
	}
	if m.role != nil {
		fields = append(fields, chatgpt35turboconversationlog.FieldRole)
	}
	if m.created_at != nil {
		fields = append(fields, chatgpt35turboconversationlog.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *Chatgpt35TurboConversationLogMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case chatgpt35turboconversationlog.FieldMessage:
		return m.Message()
	case chatgpt35turboconversationlog.FieldPurpose:
		return m.Purpose()
	case chatgpt35turboconversationlog.FieldRole:
		return m.Role()
	case chatgpt35turboconversationlog.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *Chatgpt35TurboConversationLogMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case chatgpt35turboconversationlog.FieldMessage:
		return m.OldMessage(ctx)
	case chatgpt35turboconversationlog.FieldPurpose:
		return m.OldPurpose(ctx)
	case chatgpt35turboconversationlog.FieldRole:
		return m.OldRole(ctx)
	case chatgpt35turboconversationlog.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Chatgpt35TurboConversationLog field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *Chatgpt35TurboConversationLogMutation) SetField(name string, value ent.Value) error {
	switch name {
	case chatgpt35turboconversationlog.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	case chatgpt35turboconversationlog.FieldPurpose:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPurpose(v)
		return nil
	case chatgpt35turboconversationlog.FieldRole:
		v, ok := value.(chatgpt35turboconversationlog.Role)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	case chatgpt35turboconversationlog.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Chatgpt35TurboConversationLog field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *Chatgpt35TurboConversationLogMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *Chatgpt35TurboConversationLogMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *Chatgpt35TurboConversationLogMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Chatgpt35TurboConversationLog numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *Chatgpt35TurboConversationLogMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(chatgpt35turboconversationlog.FieldPurpose) {
		fields = append(fields, chatgpt35turboconversationlog.FieldPurpose)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *Chatgpt35TurboConversationLogMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *Chatgpt35TurboConversationLogMutation) ClearField(name string) error {
	switch name {
	case chatgpt35turboconversationlog.FieldPurpose:
		m.ClearPurpose()
		return nil
	}
	return fmt.Errorf("unknown Chatgpt35TurboConversationLog nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *Chatgpt35TurboConversationLogMutation) ResetField(name string) error {
	switch name {
	case chatgpt35turboconversationlog.FieldMessage:
		m.ResetMessage()
		return nil
	case chatgpt35turboconversationlog.FieldPurpose:
		m.ResetPurpose()
		return nil
	case chatgpt35turboconversationlog.FieldRole:
		m.ResetRole()
		return nil
	case chatgpt35turboconversationlog.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Chatgpt35TurboConversationLog field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *Chatgpt35TurboConversationLogMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.conversation != nil {
		edges = append(edges, chatgpt35turboconversationlog.EdgeConversation)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *Chatgpt35TurboConversationLogMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case chatgpt35turboconversationlog.EdgeConversation:
		if id := m.conversation; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *Chatgpt35TurboConversationLogMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *Chatgpt35TurboConversationLogMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *Chatgpt35TurboConversationLogMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedconversation {
		edges = append(edges, chatgpt35turboconversationlog.EdgeConversation)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *Chatgpt35TurboConversationLogMutation) EdgeCleared(name string) bool {
	switch name {
	case chatgpt35turboconversationlog.EdgeConversation:
		return m.clearedconversation
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *Chatgpt35TurboConversationLogMutation) ClearEdge(name string) error {
	switch name {
	case chatgpt35turboconversationlog.EdgeConversation:
		m.ClearConversation()
		return nil
	}
	return fmt.Errorf("unknown Chatgpt35TurboConversationLog unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *Chatgpt35TurboConversationLogMutation) ResetEdge(name string) error {
	switch name {
	case chatgpt35turboconversationlog.EdgeConversation:
		m.ResetConversation()
		return nil
	}
	return fmt.Errorf("unknown Chatgpt35TurboConversationLog edge %s", name)
}

// ConversationsMutation represents an operation that mutates the Conversations nodes in the graph.
type ConversationsMutation struct {
	config
	op            Op
	typ           string
	id            *int
	ai_model      *conversations.AiModel
	sns_type      *conversations.SnsType
	cmd_version   *conversations.CmdVersion
	is_aborted    *bool
	abort_reason  *string
	created_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Conversations, error)
	predicates    []predicate.Conversations
}

var _ ent.Mutation = (*ConversationsMutation)(nil)

// conversationsOption allows management of the mutation configuration using functional options.
type conversationsOption func(*ConversationsMutation)

// newConversationsMutation creates new mutation for the Conversations entity.
func newConversationsMutation(c config, op Op, opts ...conversationsOption) *ConversationsMutation {
	m := &ConversationsMutation{
		config:        c,
		op:            op,
		typ:           TypeConversations,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withConversationsID sets the ID field of the mutation.
func withConversationsID(id int) conversationsOption {
	return func(m *ConversationsMutation) {
		var (
			err   error
			once  sync.Once
			value *Conversations
		)
		m.oldValue = func(ctx context.Context) (*Conversations, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Conversations.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withConversations sets the old Conversations of the mutation.
func withConversations(node *Conversations) conversationsOption {
	return func(m *ConversationsMutation) {
		m.oldValue = func(context.Context) (*Conversations, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ConversationsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ConversationsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ConversationsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ConversationsMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Conversations.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAiModel sets the "ai_model" field.
func (m *ConversationsMutation) SetAiModel(cm conversations.AiModel) {
	m.ai_model = &cm
}

// AiModel returns the value of the "ai_model" field in the mutation.
func (m *ConversationsMutation) AiModel() (r conversations.AiModel, exists bool) {
	v := m.ai_model
	if v == nil {
		return
	}
	return *v, true
}

// OldAiModel returns the old "ai_model" field's value of the Conversations entity.
// If the Conversations object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConversationsMutation) OldAiModel(ctx context.Context) (v conversations.AiModel, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAiModel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAiModel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAiModel: %w", err)
	}
	return oldValue.AiModel, nil
}

// ResetAiModel resets all changes to the "ai_model" field.
func (m *ConversationsMutation) ResetAiModel() {
	m.ai_model = nil
}

// SetSnsType sets the "sns_type" field.
func (m *ConversationsMutation) SetSnsType(ct conversations.SnsType) {
	m.sns_type = &ct
}

// SnsType returns the value of the "sns_type" field in the mutation.
func (m *ConversationsMutation) SnsType() (r conversations.SnsType, exists bool) {
	v := m.sns_type
	if v == nil {
		return
	}
	return *v, true
}

// OldSnsType returns the old "sns_type" field's value of the Conversations entity.
// If the Conversations object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConversationsMutation) OldSnsType(ctx context.Context) (v conversations.SnsType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSnsType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSnsType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSnsType: %w", err)
	}
	return oldValue.SnsType, nil
}

// ResetSnsType resets all changes to the "sns_type" field.
func (m *ConversationsMutation) ResetSnsType() {
	m.sns_type = nil
}

// SetCmdVersion sets the "cmd_version" field.
func (m *ConversationsMutation) SetCmdVersion(cv conversations.CmdVersion) {
	m.cmd_version = &cv
}

// CmdVersion returns the value of the "cmd_version" field in the mutation.
func (m *ConversationsMutation) CmdVersion() (r conversations.CmdVersion, exists bool) {
	v := m.cmd_version
	if v == nil {
		return
	}
	return *v, true
}

// OldCmdVersion returns the old "cmd_version" field's value of the Conversations entity.
// If the Conversations object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConversationsMutation) OldCmdVersion(ctx context.Context) (v conversations.CmdVersion, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCmdVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCmdVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCmdVersion: %w", err)
	}
	return oldValue.CmdVersion, nil
}

// ResetCmdVersion resets all changes to the "cmd_version" field.
func (m *ConversationsMutation) ResetCmdVersion() {
	m.cmd_version = nil
}

// SetIsAborted sets the "is_aborted" field.
func (m *ConversationsMutation) SetIsAborted(b bool) {
	m.is_aborted = &b
}

// IsAborted returns the value of the "is_aborted" field in the mutation.
func (m *ConversationsMutation) IsAborted() (r bool, exists bool) {
	v := m.is_aborted
	if v == nil {
		return
	}
	return *v, true
}

// OldIsAborted returns the old "is_aborted" field's value of the Conversations entity.
// If the Conversations object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConversationsMutation) OldIsAborted(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsAborted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsAborted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsAborted: %w", err)
	}
	return oldValue.IsAborted, nil
}

// ResetIsAborted resets all changes to the "is_aborted" field.
func (m *ConversationsMutation) ResetIsAborted() {
	m.is_aborted = nil
}

// SetAbortReason sets the "abort_reason" field.
func (m *ConversationsMutation) SetAbortReason(s string) {
	m.abort_reason = &s
}

// AbortReason returns the value of the "abort_reason" field in the mutation.
func (m *ConversationsMutation) AbortReason() (r string, exists bool) {
	v := m.abort_reason
	if v == nil {
		return
	}
	return *v, true
}

// OldAbortReason returns the old "abort_reason" field's value of the Conversations entity.
// If the Conversations object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConversationsMutation) OldAbortReason(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAbortReason is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAbortReason requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAbortReason: %w", err)
	}
	return oldValue.AbortReason, nil
}

// ClearAbortReason clears the value of the "abort_reason" field.
func (m *ConversationsMutation) ClearAbortReason() {
	m.abort_reason = nil
	m.clearedFields[conversations.FieldAbortReason] = struct{}{}
}

// AbortReasonCleared returns if the "abort_reason" field was cleared in this mutation.
func (m *ConversationsMutation) AbortReasonCleared() bool {
	_, ok := m.clearedFields[conversations.FieldAbortReason]
	return ok
}

// ResetAbortReason resets all changes to the "abort_reason" field.
func (m *ConversationsMutation) ResetAbortReason() {
	m.abort_reason = nil
	delete(m.clearedFields, conversations.FieldAbortReason)
}

// SetCreatedAt sets the "created_at" field.
func (m *ConversationsMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ConversationsMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Conversations entity.
// If the Conversations object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ConversationsMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ConversationsMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the ConversationsMutation builder.
func (m *ConversationsMutation) Where(ps ...predicate.Conversations) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ConversationsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ConversationsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Conversations, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ConversationsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ConversationsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Conversations).
func (m *ConversationsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ConversationsMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.ai_model != nil {
		fields = append(fields, conversations.FieldAiModel)
	}
	if m.sns_type != nil {
		fields = append(fields, conversations.FieldSnsType)
	}
	if m.cmd_version != nil {
		fields = append(fields, conversations.FieldCmdVersion)
	}
	if m.is_aborted != nil {
		fields = append(fields, conversations.FieldIsAborted)
	}
	if m.abort_reason != nil {
		fields = append(fields, conversations.FieldAbortReason)
	}
	if m.created_at != nil {
		fields = append(fields, conversations.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ConversationsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case conversations.FieldAiModel:
		return m.AiModel()
	case conversations.FieldSnsType:
		return m.SnsType()
	case conversations.FieldCmdVersion:
		return m.CmdVersion()
	case conversations.FieldIsAborted:
		return m.IsAborted()
	case conversations.FieldAbortReason:
		return m.AbortReason()
	case conversations.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ConversationsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case conversations.FieldAiModel:
		return m.OldAiModel(ctx)
	case conversations.FieldSnsType:
		return m.OldSnsType(ctx)
	case conversations.FieldCmdVersion:
		return m.OldCmdVersion(ctx)
	case conversations.FieldIsAborted:
		return m.OldIsAborted(ctx)
	case conversations.FieldAbortReason:
		return m.OldAbortReason(ctx)
	case conversations.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Conversations field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ConversationsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case conversations.FieldAiModel:
		v, ok := value.(conversations.AiModel)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAiModel(v)
		return nil
	case conversations.FieldSnsType:
		v, ok := value.(conversations.SnsType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSnsType(v)
		return nil
	case conversations.FieldCmdVersion:
		v, ok := value.(conversations.CmdVersion)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCmdVersion(v)
		return nil
	case conversations.FieldIsAborted:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsAborted(v)
		return nil
	case conversations.FieldAbortReason:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAbortReason(v)
		return nil
	case conversations.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Conversations field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ConversationsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ConversationsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ConversationsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Conversations numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ConversationsMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(conversations.FieldAbortReason) {
		fields = append(fields, conversations.FieldAbortReason)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ConversationsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ConversationsMutation) ClearField(name string) error {
	switch name {
	case conversations.FieldAbortReason:
		m.ClearAbortReason()
		return nil
	}
	return fmt.Errorf("unknown Conversations nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ConversationsMutation) ResetField(name string) error {
	switch name {
	case conversations.FieldAiModel:
		m.ResetAiModel()
		return nil
	case conversations.FieldSnsType:
		m.ResetSnsType()
		return nil
	case conversations.FieldCmdVersion:
		m.ResetCmdVersion()
		return nil
	case conversations.FieldIsAborted:
		m.ResetIsAborted()
		return nil
	case conversations.FieldAbortReason:
		m.ResetAbortReason()
		return nil
	case conversations.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Conversations field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ConversationsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ConversationsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ConversationsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ConversationsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ConversationsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ConversationsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ConversationsMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Conversations unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ConversationsMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Conversations edge %s", name)
}

// TwitterAccountsMutation represents an operation that mutates the TwitterAccounts nodes in the graph.
type TwitterAccountsMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	twitter_account_id  *string
	access_token        *string
	refresh_token       *string
	created_at          *time.Time
	updated_at          *time.Time
	clearedFields       map[string]struct{}
	conversation        *int
	clearedconversation bool
	done                bool
	oldValue            func(context.Context) (*TwitterAccounts, error)
	predicates          []predicate.TwitterAccounts
}

var _ ent.Mutation = (*TwitterAccountsMutation)(nil)

// twitteraccountsOption allows management of the mutation configuration using functional options.
type twitteraccountsOption func(*TwitterAccountsMutation)

// newTwitterAccountsMutation creates new mutation for the TwitterAccounts entity.
func newTwitterAccountsMutation(c config, op Op, opts ...twitteraccountsOption) *TwitterAccountsMutation {
	m := &TwitterAccountsMutation{
		config:        c,
		op:            op,
		typ:           TypeTwitterAccounts,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTwitterAccountsID sets the ID field of the mutation.
func withTwitterAccountsID(id int) twitteraccountsOption {
	return func(m *TwitterAccountsMutation) {
		var (
			err   error
			once  sync.Once
			value *TwitterAccounts
		)
		m.oldValue = func(ctx context.Context) (*TwitterAccounts, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TwitterAccounts.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTwitterAccounts sets the old TwitterAccounts of the mutation.
func withTwitterAccounts(node *TwitterAccounts) twitteraccountsOption {
	return func(m *TwitterAccountsMutation) {
		m.oldValue = func(context.Context) (*TwitterAccounts, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TwitterAccountsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TwitterAccountsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TwitterAccountsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TwitterAccountsMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TwitterAccounts.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTwitterAccountID sets the "twitter_account_id" field.
func (m *TwitterAccountsMutation) SetTwitterAccountID(s string) {
	m.twitter_account_id = &s
}

// TwitterAccountID returns the value of the "twitter_account_id" field in the mutation.
func (m *TwitterAccountsMutation) TwitterAccountID() (r string, exists bool) {
	v := m.twitter_account_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTwitterAccountID returns the old "twitter_account_id" field's value of the TwitterAccounts entity.
// If the TwitterAccounts object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterAccountsMutation) OldTwitterAccountID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTwitterAccountID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTwitterAccountID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTwitterAccountID: %w", err)
	}
	return oldValue.TwitterAccountID, nil
}

// ResetTwitterAccountID resets all changes to the "twitter_account_id" field.
func (m *TwitterAccountsMutation) ResetTwitterAccountID() {
	m.twitter_account_id = nil
}

// SetAccessToken sets the "access_token" field.
func (m *TwitterAccountsMutation) SetAccessToken(s string) {
	m.access_token = &s
}

// AccessToken returns the value of the "access_token" field in the mutation.
func (m *TwitterAccountsMutation) AccessToken() (r string, exists bool) {
	v := m.access_token
	if v == nil {
		return
	}
	return *v, true
}

// OldAccessToken returns the old "access_token" field's value of the TwitterAccounts entity.
// If the TwitterAccounts object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterAccountsMutation) OldAccessToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccessToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccessToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccessToken: %w", err)
	}
	return oldValue.AccessToken, nil
}

// ResetAccessToken resets all changes to the "access_token" field.
func (m *TwitterAccountsMutation) ResetAccessToken() {
	m.access_token = nil
}

// SetRefreshToken sets the "refresh_token" field.
func (m *TwitterAccountsMutation) SetRefreshToken(s string) {
	m.refresh_token = &s
}

// RefreshToken returns the value of the "refresh_token" field in the mutation.
func (m *TwitterAccountsMutation) RefreshToken() (r string, exists bool) {
	v := m.refresh_token
	if v == nil {
		return
	}
	return *v, true
}

// OldRefreshToken returns the old "refresh_token" field's value of the TwitterAccounts entity.
// If the TwitterAccounts object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterAccountsMutation) OldRefreshToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRefreshToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRefreshToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRefreshToken: %w", err)
	}
	return oldValue.RefreshToken, nil
}

// ResetRefreshToken resets all changes to the "refresh_token" field.
func (m *TwitterAccountsMutation) ResetRefreshToken() {
	m.refresh_token = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *TwitterAccountsMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TwitterAccountsMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the TwitterAccounts entity.
// If the TwitterAccounts object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterAccountsMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TwitterAccountsMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TwitterAccountsMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TwitterAccountsMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the TwitterAccounts entity.
// If the TwitterAccounts object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TwitterAccountsMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TwitterAccountsMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetConversationID sets the "conversation" edge to the Conversations entity by id.
func (m *TwitterAccountsMutation) SetConversationID(id int) {
	m.conversation = &id
}

// ClearConversation clears the "conversation" edge to the Conversations entity.
func (m *TwitterAccountsMutation) ClearConversation() {
	m.clearedconversation = true
}

// ConversationCleared reports if the "conversation" edge to the Conversations entity was cleared.
func (m *TwitterAccountsMutation) ConversationCleared() bool {
	return m.clearedconversation
}

// ConversationID returns the "conversation" edge ID in the mutation.
func (m *TwitterAccountsMutation) ConversationID() (id int, exists bool) {
	if m.conversation != nil {
		return *m.conversation, true
	}
	return
}

// ConversationIDs returns the "conversation" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ConversationID instead. It exists only for internal usage by the builders.
func (m *TwitterAccountsMutation) ConversationIDs() (ids []int) {
	if id := m.conversation; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetConversation resets all changes to the "conversation" edge.
func (m *TwitterAccountsMutation) ResetConversation() {
	m.conversation = nil
	m.clearedconversation = false
}

// Where appends a list predicates to the TwitterAccountsMutation builder.
func (m *TwitterAccountsMutation) Where(ps ...predicate.TwitterAccounts) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TwitterAccountsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TwitterAccountsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TwitterAccounts, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TwitterAccountsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TwitterAccountsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TwitterAccounts).
func (m *TwitterAccountsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TwitterAccountsMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.twitter_account_id != nil {
		fields = append(fields, twitteraccounts.FieldTwitterAccountID)
	}
	if m.access_token != nil {
		fields = append(fields, twitteraccounts.FieldAccessToken)
	}
	if m.refresh_token != nil {
		fields = append(fields, twitteraccounts.FieldRefreshToken)
	}
	if m.created_at != nil {
		fields = append(fields, twitteraccounts.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, twitteraccounts.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TwitterAccountsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case twitteraccounts.FieldTwitterAccountID:
		return m.TwitterAccountID()
	case twitteraccounts.FieldAccessToken:
		return m.AccessToken()
	case twitteraccounts.FieldRefreshToken:
		return m.RefreshToken()
	case twitteraccounts.FieldCreatedAt:
		return m.CreatedAt()
	case twitteraccounts.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TwitterAccountsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case twitteraccounts.FieldTwitterAccountID:
		return m.OldTwitterAccountID(ctx)
	case twitteraccounts.FieldAccessToken:
		return m.OldAccessToken(ctx)
	case twitteraccounts.FieldRefreshToken:
		return m.OldRefreshToken(ctx)
	case twitteraccounts.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case twitteraccounts.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown TwitterAccounts field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TwitterAccountsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case twitteraccounts.FieldTwitterAccountID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTwitterAccountID(v)
		return nil
	case twitteraccounts.FieldAccessToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccessToken(v)
		return nil
	case twitteraccounts.FieldRefreshToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRefreshToken(v)
		return nil
	case twitteraccounts.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case twitteraccounts.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown TwitterAccounts field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TwitterAccountsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TwitterAccountsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TwitterAccountsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TwitterAccounts numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TwitterAccountsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TwitterAccountsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TwitterAccountsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TwitterAccounts nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TwitterAccountsMutation) ResetField(name string) error {
	switch name {
	case twitteraccounts.FieldTwitterAccountID:
		m.ResetTwitterAccountID()
		return nil
	case twitteraccounts.FieldAccessToken:
		m.ResetAccessToken()
		return nil
	case twitteraccounts.FieldRefreshToken:
		m.ResetRefreshToken()
		return nil
	case twitteraccounts.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case twitteraccounts.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown TwitterAccounts field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TwitterAccountsMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.conversation != nil {
		edges = append(edges, twitteraccounts.EdgeConversation)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TwitterAccountsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case twitteraccounts.EdgeConversation:
		if id := m.conversation; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TwitterAccountsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TwitterAccountsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TwitterAccountsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedconversation {
		edges = append(edges, twitteraccounts.EdgeConversation)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TwitterAccountsMutation) EdgeCleared(name string) bool {
	switch name {
	case twitteraccounts.EdgeConversation:
		return m.clearedconversation
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TwitterAccountsMutation) ClearEdge(name string) error {
	switch name {
	case twitteraccounts.EdgeConversation:
		m.ClearConversation()
		return nil
	}
	return fmt.Errorf("unknown TwitterAccounts unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TwitterAccountsMutation) ResetEdge(name string) error {
	switch name {
	case twitteraccounts.EdgeConversation:
		m.ResetConversation()
		return nil
	}
	return fmt.Errorf("unknown TwitterAccounts edge %s", name)
}
