// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/YukiTsuchida/conversational-ai-sns-bot/app/ent/chatgpt35turboconversationlog"
	"github.com/YukiTsuchida/conversational-ai-sns-bot/app/ent/conversations"
	"github.com/YukiTsuchida/conversational-ai-sns-bot/app/ent/predicate"
)

// Chatgpt35TurboConversationLogQuery is the builder for querying Chatgpt35TurboConversationLog entities.
type Chatgpt35TurboConversationLogQuery struct {
	config
	ctx              *QueryContext
	order            []chatgpt35turboconversationlog.OrderOption
	inters           []Interceptor
	predicates       []predicate.Chatgpt35TurboConversationLog
	withConversation *ConversationsQuery
	withFKs          bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the Chatgpt35TurboConversationLogQuery builder.
func (cclq *Chatgpt35TurboConversationLogQuery) Where(ps ...predicate.Chatgpt35TurboConversationLog) *Chatgpt35TurboConversationLogQuery {
	cclq.predicates = append(cclq.predicates, ps...)
	return cclq
}

// Limit the number of records to be returned by this query.
func (cclq *Chatgpt35TurboConversationLogQuery) Limit(limit int) *Chatgpt35TurboConversationLogQuery {
	cclq.ctx.Limit = &limit
	return cclq
}

// Offset to start from.
func (cclq *Chatgpt35TurboConversationLogQuery) Offset(offset int) *Chatgpt35TurboConversationLogQuery {
	cclq.ctx.Offset = &offset
	return cclq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cclq *Chatgpt35TurboConversationLogQuery) Unique(unique bool) *Chatgpt35TurboConversationLogQuery {
	cclq.ctx.Unique = &unique
	return cclq
}

// Order specifies how the records should be ordered.
func (cclq *Chatgpt35TurboConversationLogQuery) Order(o ...chatgpt35turboconversationlog.OrderOption) *Chatgpt35TurboConversationLogQuery {
	cclq.order = append(cclq.order, o...)
	return cclq
}

// QueryConversation chains the current query on the "conversation" edge.
func (cclq *Chatgpt35TurboConversationLogQuery) QueryConversation() *ConversationsQuery {
	query := (&ConversationsClient{config: cclq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cclq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cclq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(chatgpt35turboconversationlog.Table, chatgpt35turboconversationlog.FieldID, selector),
			sqlgraph.To(conversations.Table, conversations.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, chatgpt35turboconversationlog.ConversationTable, chatgpt35turboconversationlog.ConversationColumn),
		)
		fromU = sqlgraph.SetNeighbors(cclq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Chatgpt35TurboConversationLog entity from the query.
// Returns a *NotFoundError when no Chatgpt35TurboConversationLog was found.
func (cclq *Chatgpt35TurboConversationLogQuery) First(ctx context.Context) (*Chatgpt35TurboConversationLog, error) {
	nodes, err := cclq.Limit(1).All(setContextOp(ctx, cclq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{chatgpt35turboconversationlog.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cclq *Chatgpt35TurboConversationLogQuery) FirstX(ctx context.Context) *Chatgpt35TurboConversationLog {
	node, err := cclq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Chatgpt35TurboConversationLog ID from the query.
// Returns a *NotFoundError when no Chatgpt35TurboConversationLog ID was found.
func (cclq *Chatgpt35TurboConversationLogQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = cclq.Limit(1).IDs(setContextOp(ctx, cclq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{chatgpt35turboconversationlog.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cclq *Chatgpt35TurboConversationLogQuery) FirstIDX(ctx context.Context) int {
	id, err := cclq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Chatgpt35TurboConversationLog entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Chatgpt35TurboConversationLog entity is found.
// Returns a *NotFoundError when no Chatgpt35TurboConversationLog entities are found.
func (cclq *Chatgpt35TurboConversationLogQuery) Only(ctx context.Context) (*Chatgpt35TurboConversationLog, error) {
	nodes, err := cclq.Limit(2).All(setContextOp(ctx, cclq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{chatgpt35turboconversationlog.Label}
	default:
		return nil, &NotSingularError{chatgpt35turboconversationlog.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cclq *Chatgpt35TurboConversationLogQuery) OnlyX(ctx context.Context) *Chatgpt35TurboConversationLog {
	node, err := cclq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Chatgpt35TurboConversationLog ID in the query.
// Returns a *NotSingularError when more than one Chatgpt35TurboConversationLog ID is found.
// Returns a *NotFoundError when no entities are found.
func (cclq *Chatgpt35TurboConversationLogQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = cclq.Limit(2).IDs(setContextOp(ctx, cclq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{chatgpt35turboconversationlog.Label}
	default:
		err = &NotSingularError{chatgpt35turboconversationlog.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cclq *Chatgpt35TurboConversationLogQuery) OnlyIDX(ctx context.Context) int {
	id, err := cclq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Chatgpt35TurboConversationLogs.
func (cclq *Chatgpt35TurboConversationLogQuery) All(ctx context.Context) ([]*Chatgpt35TurboConversationLog, error) {
	ctx = setContextOp(ctx, cclq.ctx, "All")
	if err := cclq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Chatgpt35TurboConversationLog, *Chatgpt35TurboConversationLogQuery]()
	return withInterceptors[[]*Chatgpt35TurboConversationLog](ctx, cclq, qr, cclq.inters)
}

// AllX is like All, but panics if an error occurs.
func (cclq *Chatgpt35TurboConversationLogQuery) AllX(ctx context.Context) []*Chatgpt35TurboConversationLog {
	nodes, err := cclq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Chatgpt35TurboConversationLog IDs.
func (cclq *Chatgpt35TurboConversationLogQuery) IDs(ctx context.Context) (ids []int, err error) {
	if cclq.ctx.Unique == nil && cclq.path != nil {
		cclq.Unique(true)
	}
	ctx = setContextOp(ctx, cclq.ctx, "IDs")
	if err = cclq.Select(chatgpt35turboconversationlog.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cclq *Chatgpt35TurboConversationLogQuery) IDsX(ctx context.Context) []int {
	ids, err := cclq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cclq *Chatgpt35TurboConversationLogQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, cclq.ctx, "Count")
	if err := cclq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, cclq, querierCount[*Chatgpt35TurboConversationLogQuery](), cclq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (cclq *Chatgpt35TurboConversationLogQuery) CountX(ctx context.Context) int {
	count, err := cclq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cclq *Chatgpt35TurboConversationLogQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, cclq.ctx, "Exist")
	switch _, err := cclq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (cclq *Chatgpt35TurboConversationLogQuery) ExistX(ctx context.Context) bool {
	exist, err := cclq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the Chatgpt35TurboConversationLogQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cclq *Chatgpt35TurboConversationLogQuery) Clone() *Chatgpt35TurboConversationLogQuery {
	if cclq == nil {
		return nil
	}
	return &Chatgpt35TurboConversationLogQuery{
		config:           cclq.config,
		ctx:              cclq.ctx.Clone(),
		order:            append([]chatgpt35turboconversationlog.OrderOption{}, cclq.order...),
		inters:           append([]Interceptor{}, cclq.inters...),
		predicates:       append([]predicate.Chatgpt35TurboConversationLog{}, cclq.predicates...),
		withConversation: cclq.withConversation.Clone(),
		// clone intermediate query.
		sql:  cclq.sql.Clone(),
		path: cclq.path,
	}
}

// WithConversation tells the query-builder to eager-load the nodes that are connected to
// the "conversation" edge. The optional arguments are used to configure the query builder of the edge.
func (cclq *Chatgpt35TurboConversationLogQuery) WithConversation(opts ...func(*ConversationsQuery)) *Chatgpt35TurboConversationLogQuery {
	query := (&ConversationsClient{config: cclq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cclq.withConversation = query
	return cclq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Message string `json:"message,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Chatgpt35TurboConversationLog.Query().
//		GroupBy(chatgpt35turboconversationlog.FieldMessage).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (cclq *Chatgpt35TurboConversationLogQuery) GroupBy(field string, fields ...string) *Chatgpt35TurboConversationLogGroupBy {
	cclq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &Chatgpt35TurboConversationLogGroupBy{build: cclq}
	grbuild.flds = &cclq.ctx.Fields
	grbuild.label = chatgpt35turboconversationlog.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Message string `json:"message,omitempty"`
//	}
//
//	client.Chatgpt35TurboConversationLog.Query().
//		Select(chatgpt35turboconversationlog.FieldMessage).
//		Scan(ctx, &v)
func (cclq *Chatgpt35TurboConversationLogQuery) Select(fields ...string) *Chatgpt35TurboConversationLogSelect {
	cclq.ctx.Fields = append(cclq.ctx.Fields, fields...)
	sbuild := &Chatgpt35TurboConversationLogSelect{Chatgpt35TurboConversationLogQuery: cclq}
	sbuild.label = chatgpt35turboconversationlog.Label
	sbuild.flds, sbuild.scan = &cclq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a Chatgpt35TurboConversationLogSelect configured with the given aggregations.
func (cclq *Chatgpt35TurboConversationLogQuery) Aggregate(fns ...AggregateFunc) *Chatgpt35TurboConversationLogSelect {
	return cclq.Select().Aggregate(fns...)
}

func (cclq *Chatgpt35TurboConversationLogQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range cclq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, cclq); err != nil {
				return err
			}
		}
	}
	for _, f := range cclq.ctx.Fields {
		if !chatgpt35turboconversationlog.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cclq.path != nil {
		prev, err := cclq.path(ctx)
		if err != nil {
			return err
		}
		cclq.sql = prev
	}
	return nil
}

func (cclq *Chatgpt35TurboConversationLogQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Chatgpt35TurboConversationLog, error) {
	var (
		nodes       = []*Chatgpt35TurboConversationLog{}
		withFKs     = cclq.withFKs
		_spec       = cclq.querySpec()
		loadedTypes = [1]bool{
			cclq.withConversation != nil,
		}
	)
	if cclq.withConversation != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, chatgpt35turboconversationlog.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Chatgpt35TurboConversationLog).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Chatgpt35TurboConversationLog{config: cclq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cclq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cclq.withConversation; query != nil {
		if err := cclq.loadConversation(ctx, query, nodes, nil,
			func(n *Chatgpt35TurboConversationLog, e *Conversations) { n.Edges.Conversation = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cclq *Chatgpt35TurboConversationLogQuery) loadConversation(ctx context.Context, query *ConversationsQuery, nodes []*Chatgpt35TurboConversationLog, init func(*Chatgpt35TurboConversationLog), assign func(*Chatgpt35TurboConversationLog, *Conversations)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Chatgpt35TurboConversationLog)
	for i := range nodes {
		if nodes[i].chatgpt35turbo_conversation_log_conversation == nil {
			continue
		}
		fk := *nodes[i].chatgpt35turbo_conversation_log_conversation
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(conversations.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "chatgpt35turbo_conversation_log_conversation" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (cclq *Chatgpt35TurboConversationLogQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cclq.querySpec()
	_spec.Node.Columns = cclq.ctx.Fields
	if len(cclq.ctx.Fields) > 0 {
		_spec.Unique = cclq.ctx.Unique != nil && *cclq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, cclq.driver, _spec)
}

func (cclq *Chatgpt35TurboConversationLogQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(chatgpt35turboconversationlog.Table, chatgpt35turboconversationlog.Columns, sqlgraph.NewFieldSpec(chatgpt35turboconversationlog.FieldID, field.TypeInt))
	_spec.From = cclq.sql
	if unique := cclq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if cclq.path != nil {
		_spec.Unique = true
	}
	if fields := cclq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chatgpt35turboconversationlog.FieldID)
		for i := range fields {
			if fields[i] != chatgpt35turboconversationlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := cclq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cclq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cclq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cclq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cclq *Chatgpt35TurboConversationLogQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cclq.driver.Dialect())
	t1 := builder.Table(chatgpt35turboconversationlog.Table)
	columns := cclq.ctx.Fields
	if len(columns) == 0 {
		columns = chatgpt35turboconversationlog.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cclq.sql != nil {
		selector = cclq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cclq.ctx.Unique != nil && *cclq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range cclq.predicates {
		p(selector)
	}
	for _, p := range cclq.order {
		p(selector)
	}
	if offset := cclq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cclq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Chatgpt35TurboConversationLogGroupBy is the group-by builder for Chatgpt35TurboConversationLog entities.
type Chatgpt35TurboConversationLogGroupBy struct {
	selector
	build *Chatgpt35TurboConversationLogQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cclgb *Chatgpt35TurboConversationLogGroupBy) Aggregate(fns ...AggregateFunc) *Chatgpt35TurboConversationLogGroupBy {
	cclgb.fns = append(cclgb.fns, fns...)
	return cclgb
}

// Scan applies the selector query and scans the result into the given value.
func (cclgb *Chatgpt35TurboConversationLogGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cclgb.build.ctx, "GroupBy")
	if err := cclgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*Chatgpt35TurboConversationLogQuery, *Chatgpt35TurboConversationLogGroupBy](ctx, cclgb.build, cclgb, cclgb.build.inters, v)
}

func (cclgb *Chatgpt35TurboConversationLogGroupBy) sqlScan(ctx context.Context, root *Chatgpt35TurboConversationLogQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cclgb.fns))
	for _, fn := range cclgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cclgb.flds)+len(cclgb.fns))
		for _, f := range *cclgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cclgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cclgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Chatgpt35TurboConversationLogSelect is the builder for selecting fields of Chatgpt35TurboConversationLog entities.
type Chatgpt35TurboConversationLogSelect struct {
	*Chatgpt35TurboConversationLogQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ccls *Chatgpt35TurboConversationLogSelect) Aggregate(fns ...AggregateFunc) *Chatgpt35TurboConversationLogSelect {
	ccls.fns = append(ccls.fns, fns...)
	return ccls
}

// Scan applies the selector query and scans the result into the given value.
func (ccls *Chatgpt35TurboConversationLogSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ccls.ctx, "Select")
	if err := ccls.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*Chatgpt35TurboConversationLogQuery, *Chatgpt35TurboConversationLogSelect](ctx, ccls.Chatgpt35TurboConversationLogQuery, ccls, ccls.inters, v)
}

func (ccls *Chatgpt35TurboConversationLogSelect) sqlScan(ctx context.Context, root *Chatgpt35TurboConversationLogQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ccls.fns))
	for _, fn := range ccls.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ccls.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ccls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
