// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/YukiTsuchida/conversational-ai-sns-bot/app/ent/chatgpt35turboconversationlog"
	"github.com/YukiTsuchida/conversational-ai-sns-bot/app/ent/conversations"
	"github.com/YukiTsuchida/conversational-ai-sns-bot/app/ent/predicate"
)

// Chatgpt35TurboConversationLogUpdate is the builder for updating Chatgpt35TurboConversationLog entities.
type Chatgpt35TurboConversationLogUpdate struct {
	config
	hooks    []Hook
	mutation *Chatgpt35TurboConversationLogMutation
}

// Where appends a list predicates to the Chatgpt35TurboConversationLogUpdate builder.
func (cclu *Chatgpt35TurboConversationLogUpdate) Where(ps ...predicate.Chatgpt35TurboConversationLog) *Chatgpt35TurboConversationLogUpdate {
	cclu.mutation.Where(ps...)
	return cclu
}

// SetMessage sets the "message" field.
func (cclu *Chatgpt35TurboConversationLogUpdate) SetMessage(s string) *Chatgpt35TurboConversationLogUpdate {
	cclu.mutation.SetMessage(s)
	return cclu
}

// SetPurpose sets the "purpose" field.
func (cclu *Chatgpt35TurboConversationLogUpdate) SetPurpose(s string) *Chatgpt35TurboConversationLogUpdate {
	cclu.mutation.SetPurpose(s)
	return cclu
}

// SetNillablePurpose sets the "purpose" field if the given value is not nil.
func (cclu *Chatgpt35TurboConversationLogUpdate) SetNillablePurpose(s *string) *Chatgpt35TurboConversationLogUpdate {
	if s != nil {
		cclu.SetPurpose(*s)
	}
	return cclu
}

// ClearPurpose clears the value of the "purpose" field.
func (cclu *Chatgpt35TurboConversationLogUpdate) ClearPurpose() *Chatgpt35TurboConversationLogUpdate {
	cclu.mutation.ClearPurpose()
	return cclu
}

// SetRole sets the "role" field.
func (cclu *Chatgpt35TurboConversationLogUpdate) SetRole(c chatgpt35turboconversationlog.Role) *Chatgpt35TurboConversationLogUpdate {
	cclu.mutation.SetRole(c)
	return cclu
}

// SetCreatedAt sets the "created_at" field.
func (cclu *Chatgpt35TurboConversationLogUpdate) SetCreatedAt(t time.Time) *Chatgpt35TurboConversationLogUpdate {
	cclu.mutation.SetCreatedAt(t)
	return cclu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cclu *Chatgpt35TurboConversationLogUpdate) SetNillableCreatedAt(t *time.Time) *Chatgpt35TurboConversationLogUpdate {
	if t != nil {
		cclu.SetCreatedAt(*t)
	}
	return cclu
}

// SetConversationID sets the "conversation" edge to the Conversations entity by ID.
func (cclu *Chatgpt35TurboConversationLogUpdate) SetConversationID(id int) *Chatgpt35TurboConversationLogUpdate {
	cclu.mutation.SetConversationID(id)
	return cclu
}

// SetNillableConversationID sets the "conversation" edge to the Conversations entity by ID if the given value is not nil.
func (cclu *Chatgpt35TurboConversationLogUpdate) SetNillableConversationID(id *int) *Chatgpt35TurboConversationLogUpdate {
	if id != nil {
		cclu = cclu.SetConversationID(*id)
	}
	return cclu
}

// SetConversation sets the "conversation" edge to the Conversations entity.
func (cclu *Chatgpt35TurboConversationLogUpdate) SetConversation(c *Conversations) *Chatgpt35TurboConversationLogUpdate {
	return cclu.SetConversationID(c.ID)
}

// Mutation returns the Chatgpt35TurboConversationLogMutation object of the builder.
func (cclu *Chatgpt35TurboConversationLogUpdate) Mutation() *Chatgpt35TurboConversationLogMutation {
	return cclu.mutation
}

// ClearConversation clears the "conversation" edge to the Conversations entity.
func (cclu *Chatgpt35TurboConversationLogUpdate) ClearConversation() *Chatgpt35TurboConversationLogUpdate {
	cclu.mutation.ClearConversation()
	return cclu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cclu *Chatgpt35TurboConversationLogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cclu.sqlSave, cclu.mutation, cclu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cclu *Chatgpt35TurboConversationLogUpdate) SaveX(ctx context.Context) int {
	affected, err := cclu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cclu *Chatgpt35TurboConversationLogUpdate) Exec(ctx context.Context) error {
	_, err := cclu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cclu *Chatgpt35TurboConversationLogUpdate) ExecX(ctx context.Context) {
	if err := cclu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cclu *Chatgpt35TurboConversationLogUpdate) check() error {
	if v, ok := cclu.mutation.Message(); ok {
		if err := chatgpt35turboconversationlog.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`ent: validator failed for field "Chatgpt35TurboConversationLog.message": %w`, err)}
		}
	}
	if v, ok := cclu.mutation.Role(); ok {
		if err := chatgpt35turboconversationlog.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "Chatgpt35TurboConversationLog.role": %w`, err)}
		}
	}
	return nil
}

func (cclu *Chatgpt35TurboConversationLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cclu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(chatgpt35turboconversationlog.Table, chatgpt35turboconversationlog.Columns, sqlgraph.NewFieldSpec(chatgpt35turboconversationlog.FieldID, field.TypeInt))
	if ps := cclu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cclu.mutation.Message(); ok {
		_spec.SetField(chatgpt35turboconversationlog.FieldMessage, field.TypeString, value)
	}
	if value, ok := cclu.mutation.Purpose(); ok {
		_spec.SetField(chatgpt35turboconversationlog.FieldPurpose, field.TypeString, value)
	}
	if cclu.mutation.PurposeCleared() {
		_spec.ClearField(chatgpt35turboconversationlog.FieldPurpose, field.TypeString)
	}
	if value, ok := cclu.mutation.Role(); ok {
		_spec.SetField(chatgpt35turboconversationlog.FieldRole, field.TypeEnum, value)
	}
	if value, ok := cclu.mutation.CreatedAt(); ok {
		_spec.SetField(chatgpt35turboconversationlog.FieldCreatedAt, field.TypeTime, value)
	}
	if cclu.mutation.ConversationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   chatgpt35turboconversationlog.ConversationTable,
			Columns: []string{chatgpt35turboconversationlog.ConversationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversations.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cclu.mutation.ConversationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   chatgpt35turboconversationlog.ConversationTable,
			Columns: []string{chatgpt35turboconversationlog.ConversationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversations.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cclu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chatgpt35turboconversationlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cclu.mutation.done = true
	return n, nil
}

// Chatgpt35TurboConversationLogUpdateOne is the builder for updating a single Chatgpt35TurboConversationLog entity.
type Chatgpt35TurboConversationLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *Chatgpt35TurboConversationLogMutation
}

// SetMessage sets the "message" field.
func (ccluo *Chatgpt35TurboConversationLogUpdateOne) SetMessage(s string) *Chatgpt35TurboConversationLogUpdateOne {
	ccluo.mutation.SetMessage(s)
	return ccluo
}

// SetPurpose sets the "purpose" field.
func (ccluo *Chatgpt35TurboConversationLogUpdateOne) SetPurpose(s string) *Chatgpt35TurboConversationLogUpdateOne {
	ccluo.mutation.SetPurpose(s)
	return ccluo
}

// SetNillablePurpose sets the "purpose" field if the given value is not nil.
func (ccluo *Chatgpt35TurboConversationLogUpdateOne) SetNillablePurpose(s *string) *Chatgpt35TurboConversationLogUpdateOne {
	if s != nil {
		ccluo.SetPurpose(*s)
	}
	return ccluo
}

// ClearPurpose clears the value of the "purpose" field.
func (ccluo *Chatgpt35TurboConversationLogUpdateOne) ClearPurpose() *Chatgpt35TurboConversationLogUpdateOne {
	ccluo.mutation.ClearPurpose()
	return ccluo
}

// SetRole sets the "role" field.
func (ccluo *Chatgpt35TurboConversationLogUpdateOne) SetRole(c chatgpt35turboconversationlog.Role) *Chatgpt35TurboConversationLogUpdateOne {
	ccluo.mutation.SetRole(c)
	return ccluo
}

// SetCreatedAt sets the "created_at" field.
func (ccluo *Chatgpt35TurboConversationLogUpdateOne) SetCreatedAt(t time.Time) *Chatgpt35TurboConversationLogUpdateOne {
	ccluo.mutation.SetCreatedAt(t)
	return ccluo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ccluo *Chatgpt35TurboConversationLogUpdateOne) SetNillableCreatedAt(t *time.Time) *Chatgpt35TurboConversationLogUpdateOne {
	if t != nil {
		ccluo.SetCreatedAt(*t)
	}
	return ccluo
}

// SetConversationID sets the "conversation" edge to the Conversations entity by ID.
func (ccluo *Chatgpt35TurboConversationLogUpdateOne) SetConversationID(id int) *Chatgpt35TurboConversationLogUpdateOne {
	ccluo.mutation.SetConversationID(id)
	return ccluo
}

// SetNillableConversationID sets the "conversation" edge to the Conversations entity by ID if the given value is not nil.
func (ccluo *Chatgpt35TurboConversationLogUpdateOne) SetNillableConversationID(id *int) *Chatgpt35TurboConversationLogUpdateOne {
	if id != nil {
		ccluo = ccluo.SetConversationID(*id)
	}
	return ccluo
}

// SetConversation sets the "conversation" edge to the Conversations entity.
func (ccluo *Chatgpt35TurboConversationLogUpdateOne) SetConversation(c *Conversations) *Chatgpt35TurboConversationLogUpdateOne {
	return ccluo.SetConversationID(c.ID)
}

// Mutation returns the Chatgpt35TurboConversationLogMutation object of the builder.
func (ccluo *Chatgpt35TurboConversationLogUpdateOne) Mutation() *Chatgpt35TurboConversationLogMutation {
	return ccluo.mutation
}

// ClearConversation clears the "conversation" edge to the Conversations entity.
func (ccluo *Chatgpt35TurboConversationLogUpdateOne) ClearConversation() *Chatgpt35TurboConversationLogUpdateOne {
	ccluo.mutation.ClearConversation()
	return ccluo
}

// Where appends a list predicates to the Chatgpt35TurboConversationLogUpdate builder.
func (ccluo *Chatgpt35TurboConversationLogUpdateOne) Where(ps ...predicate.Chatgpt35TurboConversationLog) *Chatgpt35TurboConversationLogUpdateOne {
	ccluo.mutation.Where(ps...)
	return ccluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ccluo *Chatgpt35TurboConversationLogUpdateOne) Select(field string, fields ...string) *Chatgpt35TurboConversationLogUpdateOne {
	ccluo.fields = append([]string{field}, fields...)
	return ccluo
}

// Save executes the query and returns the updated Chatgpt35TurboConversationLog entity.
func (ccluo *Chatgpt35TurboConversationLogUpdateOne) Save(ctx context.Context) (*Chatgpt35TurboConversationLog, error) {
	return withHooks(ctx, ccluo.sqlSave, ccluo.mutation, ccluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ccluo *Chatgpt35TurboConversationLogUpdateOne) SaveX(ctx context.Context) *Chatgpt35TurboConversationLog {
	node, err := ccluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ccluo *Chatgpt35TurboConversationLogUpdateOne) Exec(ctx context.Context) error {
	_, err := ccluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccluo *Chatgpt35TurboConversationLogUpdateOne) ExecX(ctx context.Context) {
	if err := ccluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccluo *Chatgpt35TurboConversationLogUpdateOne) check() error {
	if v, ok := ccluo.mutation.Message(); ok {
		if err := chatgpt35turboconversationlog.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`ent: validator failed for field "Chatgpt35TurboConversationLog.message": %w`, err)}
		}
	}
	if v, ok := ccluo.mutation.Role(); ok {
		if err := chatgpt35turboconversationlog.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "Chatgpt35TurboConversationLog.role": %w`, err)}
		}
	}
	return nil
}

func (ccluo *Chatgpt35TurboConversationLogUpdateOne) sqlSave(ctx context.Context) (_node *Chatgpt35TurboConversationLog, err error) {
	if err := ccluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(chatgpt35turboconversationlog.Table, chatgpt35turboconversationlog.Columns, sqlgraph.NewFieldSpec(chatgpt35turboconversationlog.FieldID, field.TypeInt))
	id, ok := ccluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Chatgpt35TurboConversationLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ccluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chatgpt35turboconversationlog.FieldID)
		for _, f := range fields {
			if !chatgpt35turboconversationlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != chatgpt35turboconversationlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ccluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccluo.mutation.Message(); ok {
		_spec.SetField(chatgpt35turboconversationlog.FieldMessage, field.TypeString, value)
	}
	if value, ok := ccluo.mutation.Purpose(); ok {
		_spec.SetField(chatgpt35turboconversationlog.FieldPurpose, field.TypeString, value)
	}
	if ccluo.mutation.PurposeCleared() {
		_spec.ClearField(chatgpt35turboconversationlog.FieldPurpose, field.TypeString)
	}
	if value, ok := ccluo.mutation.Role(); ok {
		_spec.SetField(chatgpt35turboconversationlog.FieldRole, field.TypeEnum, value)
	}
	if value, ok := ccluo.mutation.CreatedAt(); ok {
		_spec.SetField(chatgpt35turboconversationlog.FieldCreatedAt, field.TypeTime, value)
	}
	if ccluo.mutation.ConversationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   chatgpt35turboconversationlog.ConversationTable,
			Columns: []string{chatgpt35turboconversationlog.ConversationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversations.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccluo.mutation.ConversationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   chatgpt35turboconversationlog.ConversationTable,
			Columns: []string{chatgpt35turboconversationlog.ConversationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversations.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Chatgpt35TurboConversationLog{config: ccluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ccluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chatgpt35turboconversationlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ccluo.mutation.done = true
	return _node, nil
}
