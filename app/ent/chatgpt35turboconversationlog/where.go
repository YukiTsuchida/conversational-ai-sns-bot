// Code generated by ent, DO NOT EDIT.

package chatgpt35turboconversationlog

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/YukiTsuchida/conversational-ai-sns-bot/app/controller/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldLTE(FieldID, id))
}

// Message applies equality check predicate on the "message" field. It's identical to MessageEQ.
func Message(v string) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldEQ(FieldMessage, v))
}

// Purpose applies equality check predicate on the "purpose" field. It's identical to PurposeEQ.
func Purpose(v string) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldEQ(FieldPurpose, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldEQ(FieldCreatedAt, v))
}

// MessageEQ applies the EQ predicate on the "message" field.
func MessageEQ(v string) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldEQ(FieldMessage, v))
}

// MessageNEQ applies the NEQ predicate on the "message" field.
func MessageNEQ(v string) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldNEQ(FieldMessage, v))
}

// MessageIn applies the In predicate on the "message" field.
func MessageIn(vs ...string) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldIn(FieldMessage, vs...))
}

// MessageNotIn applies the NotIn predicate on the "message" field.
func MessageNotIn(vs ...string) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldNotIn(FieldMessage, vs...))
}

// MessageGT applies the GT predicate on the "message" field.
func MessageGT(v string) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldGT(FieldMessage, v))
}

// MessageGTE applies the GTE predicate on the "message" field.
func MessageGTE(v string) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldGTE(FieldMessage, v))
}

// MessageLT applies the LT predicate on the "message" field.
func MessageLT(v string) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldLT(FieldMessage, v))
}

// MessageLTE applies the LTE predicate on the "message" field.
func MessageLTE(v string) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldLTE(FieldMessage, v))
}

// MessageContains applies the Contains predicate on the "message" field.
func MessageContains(v string) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldContains(FieldMessage, v))
}

// MessageHasPrefix applies the HasPrefix predicate on the "message" field.
func MessageHasPrefix(v string) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldHasPrefix(FieldMessage, v))
}

// MessageHasSuffix applies the HasSuffix predicate on the "message" field.
func MessageHasSuffix(v string) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldHasSuffix(FieldMessage, v))
}

// MessageEqualFold applies the EqualFold predicate on the "message" field.
func MessageEqualFold(v string) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldEqualFold(FieldMessage, v))
}

// MessageContainsFold applies the ContainsFold predicate on the "message" field.
func MessageContainsFold(v string) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldContainsFold(FieldMessage, v))
}

// PurposeEQ applies the EQ predicate on the "purpose" field.
func PurposeEQ(v string) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldEQ(FieldPurpose, v))
}

// PurposeNEQ applies the NEQ predicate on the "purpose" field.
func PurposeNEQ(v string) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldNEQ(FieldPurpose, v))
}

// PurposeIn applies the In predicate on the "purpose" field.
func PurposeIn(vs ...string) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldIn(FieldPurpose, vs...))
}

// PurposeNotIn applies the NotIn predicate on the "purpose" field.
func PurposeNotIn(vs ...string) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldNotIn(FieldPurpose, vs...))
}

// PurposeGT applies the GT predicate on the "purpose" field.
func PurposeGT(v string) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldGT(FieldPurpose, v))
}

// PurposeGTE applies the GTE predicate on the "purpose" field.
func PurposeGTE(v string) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldGTE(FieldPurpose, v))
}

// PurposeLT applies the LT predicate on the "purpose" field.
func PurposeLT(v string) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldLT(FieldPurpose, v))
}

// PurposeLTE applies the LTE predicate on the "purpose" field.
func PurposeLTE(v string) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldLTE(FieldPurpose, v))
}

// PurposeContains applies the Contains predicate on the "purpose" field.
func PurposeContains(v string) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldContains(FieldPurpose, v))
}

// PurposeHasPrefix applies the HasPrefix predicate on the "purpose" field.
func PurposeHasPrefix(v string) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldHasPrefix(FieldPurpose, v))
}

// PurposeHasSuffix applies the HasSuffix predicate on the "purpose" field.
func PurposeHasSuffix(v string) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldHasSuffix(FieldPurpose, v))
}

// PurposeIsNil applies the IsNil predicate on the "purpose" field.
func PurposeIsNil() predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldIsNull(FieldPurpose))
}

// PurposeNotNil applies the NotNil predicate on the "purpose" field.
func PurposeNotNil() predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldNotNull(FieldPurpose))
}

// PurposeEqualFold applies the EqualFold predicate on the "purpose" field.
func PurposeEqualFold(v string) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldEqualFold(FieldPurpose, v))
}

// PurposeContainsFold applies the ContainsFold predicate on the "purpose" field.
func PurposeContainsFold(v string) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldContainsFold(FieldPurpose, v))
}

// RoleEQ applies the EQ predicate on the "role" field.
func RoleEQ(v Role) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldEQ(FieldRole, v))
}

// RoleNEQ applies the NEQ predicate on the "role" field.
func RoleNEQ(v Role) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldNEQ(FieldRole, v))
}

// RoleIn applies the In predicate on the "role" field.
func RoleIn(vs ...Role) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldIn(FieldRole, vs...))
}

// RoleNotIn applies the NotIn predicate on the "role" field.
func RoleNotIn(vs ...Role) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldNotIn(FieldRole, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(sql.FieldLTE(FieldCreatedAt, v))
}

// HasConversation applies the HasEdge predicate on the "conversation" edge.
func HasConversation() predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ConversationTable, ConversationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConversationWith applies the HasEdge predicate on the "conversation" edge with a given conditions (other predicates).
func HasConversationWith(preds ...predicate.Conversations) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(func(s *sql.Selector) {
		step := newConversationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Chatgpt35TurboConversationLog) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Chatgpt35TurboConversationLog) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Chatgpt35TurboConversationLog) predicate.Chatgpt35TurboConversationLog {
	return predicate.Chatgpt35TurboConversationLog(func(s *sql.Selector) {
		p(s.Not())
	})
}
