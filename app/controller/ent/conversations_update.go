// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/YukiTsuchida/conversational-ai-sns-bot/app/controller/ent/conversations"
	"github.com/YukiTsuchida/conversational-ai-sns-bot/app/controller/ent/predicate"
)

// ConversationsUpdate is the builder for updating Conversations entities.
type ConversationsUpdate struct {
	config
	hooks    []Hook
	mutation *ConversationsMutation
}

// Where appends a list predicates to the ConversationsUpdate builder.
func (cu *ConversationsUpdate) Where(ps ...predicate.Conversations) *ConversationsUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetAiModel sets the "ai_model" field.
func (cu *ConversationsUpdate) SetAiModel(cm conversations.AiModel) *ConversationsUpdate {
	cu.mutation.SetAiModel(cm)
	return cu
}

// SetSnsType sets the "sns_type" field.
func (cu *ConversationsUpdate) SetSnsType(ct conversations.SnsType) *ConversationsUpdate {
	cu.mutation.SetSnsType(ct)
	return cu
}

// SetCmdVersion sets the "cmd_version" field.
func (cu *ConversationsUpdate) SetCmdVersion(cv conversations.CmdVersion) *ConversationsUpdate {
	cu.mutation.SetCmdVersion(cv)
	return cu
}

// SetIsAborted sets the "is_aborted" field.
func (cu *ConversationsUpdate) SetIsAborted(b bool) *ConversationsUpdate {
	cu.mutation.SetIsAborted(b)
	return cu
}

// SetNillableIsAborted sets the "is_aborted" field if the given value is not nil.
func (cu *ConversationsUpdate) SetNillableIsAborted(b *bool) *ConversationsUpdate {
	if b != nil {
		cu.SetIsAborted(*b)
	}
	return cu
}

// SetCreatedAt sets the "created_at" field.
func (cu *ConversationsUpdate) SetCreatedAt(t time.Time) *ConversationsUpdate {
	cu.mutation.SetCreatedAt(t)
	return cu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cu *ConversationsUpdate) SetNillableCreatedAt(t *time.Time) *ConversationsUpdate {
	if t != nil {
		cu.SetCreatedAt(*t)
	}
	return cu
}

// Mutation returns the ConversationsMutation object of the builder.
func (cu *ConversationsUpdate) Mutation() *ConversationsMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ConversationsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ConversationsUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ConversationsUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ConversationsUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ConversationsUpdate) check() error {
	if v, ok := cu.mutation.AiModel(); ok {
		if err := conversations.AiModelValidator(v); err != nil {
			return &ValidationError{Name: "ai_model", err: fmt.Errorf(`ent: validator failed for field "Conversations.ai_model": %w`, err)}
		}
	}
	if v, ok := cu.mutation.SnsType(); ok {
		if err := conversations.SnsTypeValidator(v); err != nil {
			return &ValidationError{Name: "sns_type", err: fmt.Errorf(`ent: validator failed for field "Conversations.sns_type": %w`, err)}
		}
	}
	if v, ok := cu.mutation.CmdVersion(); ok {
		if err := conversations.CmdVersionValidator(v); err != nil {
			return &ValidationError{Name: "cmd_version", err: fmt.Errorf(`ent: validator failed for field "Conversations.cmd_version": %w`, err)}
		}
	}
	return nil
}

func (cu *ConversationsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(conversations.Table, conversations.Columns, sqlgraph.NewFieldSpec(conversations.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.AiModel(); ok {
		_spec.SetField(conversations.FieldAiModel, field.TypeEnum, value)
	}
	if value, ok := cu.mutation.SnsType(); ok {
		_spec.SetField(conversations.FieldSnsType, field.TypeEnum, value)
	}
	if value, ok := cu.mutation.CmdVersion(); ok {
		_spec.SetField(conversations.FieldCmdVersion, field.TypeEnum, value)
	}
	if value, ok := cu.mutation.IsAborted(); ok {
		_spec.SetField(conversations.FieldIsAborted, field.TypeBool, value)
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.SetField(conversations.FieldCreatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{conversations.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ConversationsUpdateOne is the builder for updating a single Conversations entity.
type ConversationsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConversationsMutation
}

// SetAiModel sets the "ai_model" field.
func (cuo *ConversationsUpdateOne) SetAiModel(cm conversations.AiModel) *ConversationsUpdateOne {
	cuo.mutation.SetAiModel(cm)
	return cuo
}

// SetSnsType sets the "sns_type" field.
func (cuo *ConversationsUpdateOne) SetSnsType(ct conversations.SnsType) *ConversationsUpdateOne {
	cuo.mutation.SetSnsType(ct)
	return cuo
}

// SetCmdVersion sets the "cmd_version" field.
func (cuo *ConversationsUpdateOne) SetCmdVersion(cv conversations.CmdVersion) *ConversationsUpdateOne {
	cuo.mutation.SetCmdVersion(cv)
	return cuo
}

// SetIsAborted sets the "is_aborted" field.
func (cuo *ConversationsUpdateOne) SetIsAborted(b bool) *ConversationsUpdateOne {
	cuo.mutation.SetIsAborted(b)
	return cuo
}

// SetNillableIsAborted sets the "is_aborted" field if the given value is not nil.
func (cuo *ConversationsUpdateOne) SetNillableIsAborted(b *bool) *ConversationsUpdateOne {
	if b != nil {
		cuo.SetIsAborted(*b)
	}
	return cuo
}

// SetCreatedAt sets the "created_at" field.
func (cuo *ConversationsUpdateOne) SetCreatedAt(t time.Time) *ConversationsUpdateOne {
	cuo.mutation.SetCreatedAt(t)
	return cuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cuo *ConversationsUpdateOne) SetNillableCreatedAt(t *time.Time) *ConversationsUpdateOne {
	if t != nil {
		cuo.SetCreatedAt(*t)
	}
	return cuo
}

// Mutation returns the ConversationsMutation object of the builder.
func (cuo *ConversationsUpdateOne) Mutation() *ConversationsMutation {
	return cuo.mutation
}

// Where appends a list predicates to the ConversationsUpdate builder.
func (cuo *ConversationsUpdateOne) Where(ps ...predicate.Conversations) *ConversationsUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ConversationsUpdateOne) Select(field string, fields ...string) *ConversationsUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Conversations entity.
func (cuo *ConversationsUpdateOne) Save(ctx context.Context) (*Conversations, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ConversationsUpdateOne) SaveX(ctx context.Context) *Conversations {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ConversationsUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ConversationsUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ConversationsUpdateOne) check() error {
	if v, ok := cuo.mutation.AiModel(); ok {
		if err := conversations.AiModelValidator(v); err != nil {
			return &ValidationError{Name: "ai_model", err: fmt.Errorf(`ent: validator failed for field "Conversations.ai_model": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.SnsType(); ok {
		if err := conversations.SnsTypeValidator(v); err != nil {
			return &ValidationError{Name: "sns_type", err: fmt.Errorf(`ent: validator failed for field "Conversations.sns_type": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.CmdVersion(); ok {
		if err := conversations.CmdVersionValidator(v); err != nil {
			return &ValidationError{Name: "cmd_version", err: fmt.Errorf(`ent: validator failed for field "Conversations.cmd_version": %w`, err)}
		}
	}
	return nil
}

func (cuo *ConversationsUpdateOne) sqlSave(ctx context.Context) (_node *Conversations, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(conversations.Table, conversations.Columns, sqlgraph.NewFieldSpec(conversations.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Conversations.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, conversations.FieldID)
		for _, f := range fields {
			if !conversations.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != conversations.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.AiModel(); ok {
		_spec.SetField(conversations.FieldAiModel, field.TypeEnum, value)
	}
	if value, ok := cuo.mutation.SnsType(); ok {
		_spec.SetField(conversations.FieldSnsType, field.TypeEnum, value)
	}
	if value, ok := cuo.mutation.CmdVersion(); ok {
		_spec.SetField(conversations.FieldCmdVersion, field.TypeEnum, value)
	}
	if value, ok := cuo.mutation.IsAborted(); ok {
		_spec.SetField(conversations.FieldIsAborted, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.SetField(conversations.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &Conversations{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{conversations.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
