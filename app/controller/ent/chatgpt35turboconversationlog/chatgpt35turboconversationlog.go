// Code generated by ent, DO NOT EDIT.

package chatgpt35turboconversationlog

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the chatgpt35turboconversationlog type in the database.
	Label = "chatgpt35turbo_conversation_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldMessage holds the string denoting the message field in the database.
	FieldMessage = "message"
	// FieldPurpose holds the string denoting the purpose field in the database.
	FieldPurpose = "purpose"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeConversation holds the string denoting the conversation edge name in mutations.
	EdgeConversation = "conversation"
	// Table holds the table name of the chatgpt35turboconversationlog in the database.
	Table = "chatgpt35turbo_conversation_logs"
	// ConversationTable is the table that holds the conversation relation/edge.
	ConversationTable = "chatgpt35turbo_conversation_logs"
	// ConversationInverseTable is the table name for the Conversations entity.
	// It exists in this package in order to avoid circular dependency with the "conversations" package.
	ConversationInverseTable = "conversations"
	// ConversationColumn is the table column denoting the conversation relation/edge.
	ConversationColumn = "chatgpt35turbo_conversation_log_conversation"
)

// Columns holds all SQL columns for chatgpt35turboconversationlog fields.
var Columns = []string{
	FieldID,
	FieldMessage,
	FieldPurpose,
	FieldRole,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "chatgpt35turbo_conversation_logs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"chatgpt35turbo_conversation_log_conversation",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// MessageValidator is a validator for the "message" field. It is called by the builders before save.
	MessageValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// Role defines the type for the "role" enum field.
type Role string

// Role values.
const (
	RoleSystem    Role = "system"
	RoleUser      Role = "user"
	RoleAssistant Role = "assistant"
)

func (r Role) String() string {
	return string(r)
}

// RoleValidator is a validator for the "role" field enum values. It is called by the builders before save.
func RoleValidator(r Role) error {
	switch r {
	case RoleSystem, RoleUser, RoleAssistant:
		return nil
	default:
		return fmt.Errorf("chatgpt35turboconversationlog: invalid enum value for role field: %q", r)
	}
}

// OrderOption defines the ordering options for the Chatgpt35TurboConversationLog queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByMessage orders the results by the message field.
func ByMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMessage, opts...).ToFunc()
}

// ByPurpose orders the results by the purpose field.
func ByPurpose(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPurpose, opts...).ToFunc()
}

// ByRole orders the results by the role field.
func ByRole(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRole, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByConversationField orders the results by conversation field.
func ByConversationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newConversationStep(), sql.OrderByField(field, opts...))
	}
}
func newConversationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ConversationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ConversationTable, ConversationColumn),
	)
}
