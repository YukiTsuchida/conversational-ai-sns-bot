// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/YukiTsuchida/conversational-ai-sns-bot/app/controller/ent/chatgpt35turboconversationlog"
	"github.com/YukiTsuchida/conversational-ai-sns-bot/app/controller/ent/predicate"
)

// Chatgpt35TurboConversationLogDelete is the builder for deleting a Chatgpt35TurboConversationLog entity.
type Chatgpt35TurboConversationLogDelete struct {
	config
	hooks    []Hook
	mutation *Chatgpt35TurboConversationLogMutation
}

// Where appends a list predicates to the Chatgpt35TurboConversationLogDelete builder.
func (ccld *Chatgpt35TurboConversationLogDelete) Where(ps ...predicate.Chatgpt35TurboConversationLog) *Chatgpt35TurboConversationLogDelete {
	ccld.mutation.Where(ps...)
	return ccld
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ccld *Chatgpt35TurboConversationLogDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ccld.sqlExec, ccld.mutation, ccld.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ccld *Chatgpt35TurboConversationLogDelete) ExecX(ctx context.Context) int {
	n, err := ccld.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ccld *Chatgpt35TurboConversationLogDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(chatgpt35turboconversationlog.Table, sqlgraph.NewFieldSpec(chatgpt35turboconversationlog.FieldID, field.TypeInt))
	if ps := ccld.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ccld.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ccld.mutation.done = true
	return affected, err
}

// Chatgpt35TurboConversationLogDeleteOne is the builder for deleting a single Chatgpt35TurboConversationLog entity.
type Chatgpt35TurboConversationLogDeleteOne struct {
	ccld *Chatgpt35TurboConversationLogDelete
}

// Where appends a list predicates to the Chatgpt35TurboConversationLogDelete builder.
func (ccldo *Chatgpt35TurboConversationLogDeleteOne) Where(ps ...predicate.Chatgpt35TurboConversationLog) *Chatgpt35TurboConversationLogDeleteOne {
	ccldo.ccld.mutation.Where(ps...)
	return ccldo
}

// Exec executes the deletion query.
func (ccldo *Chatgpt35TurboConversationLogDeleteOne) Exec(ctx context.Context) error {
	n, err := ccldo.ccld.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{chatgpt35turboconversationlog.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ccldo *Chatgpt35TurboConversationLogDeleteOne) ExecX(ctx context.Context) {
	if err := ccldo.Exec(ctx); err != nil {
		panic(err)
	}
}
