// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/YukiTsuchida/conversational-ai-sns-bot/app/controller/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/YukiTsuchida/conversational-ai-sns-bot/app/controller/ent/chatgpt35turboconversationlog"
	"github.com/YukiTsuchida/conversational-ai-sns-bot/app/controller/ent/conversations"
	"github.com/YukiTsuchida/conversational-ai-sns-bot/app/controller/ent/twitteraccounts"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Chatgpt35TurboConversationLog is the client for interacting with the Chatgpt35TurboConversationLog builders.
	Chatgpt35TurboConversationLog *Chatgpt35TurboConversationLogClient
	// Conversations is the client for interacting with the Conversations builders.
	Conversations *ConversationsClient
	// TwitterAccounts is the client for interacting with the TwitterAccounts builders.
	TwitterAccounts *TwitterAccountsClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Chatgpt35TurboConversationLog = NewChatgpt35TurboConversationLogClient(c.config)
	c.Conversations = NewConversationsClient(c.config)
	c.TwitterAccounts = NewTwitterAccountsClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                           ctx,
		config:                        cfg,
		Chatgpt35TurboConversationLog: NewChatgpt35TurboConversationLogClient(cfg),
		Conversations:                 NewConversationsClient(cfg),
		TwitterAccounts:               NewTwitterAccountsClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                           ctx,
		config:                        cfg,
		Chatgpt35TurboConversationLog: NewChatgpt35TurboConversationLogClient(cfg),
		Conversations:                 NewConversationsClient(cfg),
		TwitterAccounts:               NewTwitterAccountsClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Chatgpt35TurboConversationLog.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Chatgpt35TurboConversationLog.Use(hooks...)
	c.Conversations.Use(hooks...)
	c.TwitterAccounts.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Chatgpt35TurboConversationLog.Intercept(interceptors...)
	c.Conversations.Intercept(interceptors...)
	c.TwitterAccounts.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *Chatgpt35TurboConversationLogMutation:
		return c.Chatgpt35TurboConversationLog.mutate(ctx, m)
	case *ConversationsMutation:
		return c.Conversations.mutate(ctx, m)
	case *TwitterAccountsMutation:
		return c.TwitterAccounts.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// Chatgpt35TurboConversationLogClient is a client for the Chatgpt35TurboConversationLog schema.
type Chatgpt35TurboConversationLogClient struct {
	config
}

// NewChatgpt35TurboConversationLogClient returns a client for the Chatgpt35TurboConversationLog from the given config.
func NewChatgpt35TurboConversationLogClient(c config) *Chatgpt35TurboConversationLogClient {
	return &Chatgpt35TurboConversationLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `chatgpt35turboconversationlog.Hooks(f(g(h())))`.
func (c *Chatgpt35TurboConversationLogClient) Use(hooks ...Hook) {
	c.hooks.Chatgpt35TurboConversationLog = append(c.hooks.Chatgpt35TurboConversationLog, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `chatgpt35turboconversationlog.Intercept(f(g(h())))`.
func (c *Chatgpt35TurboConversationLogClient) Intercept(interceptors ...Interceptor) {
	c.inters.Chatgpt35TurboConversationLog = append(c.inters.Chatgpt35TurboConversationLog, interceptors...)
}

// Create returns a builder for creating a Chatgpt35TurboConversationLog entity.
func (c *Chatgpt35TurboConversationLogClient) Create() *Chatgpt35TurboConversationLogCreate {
	mutation := newChatgpt35TurboConversationLogMutation(c.config, OpCreate)
	return &Chatgpt35TurboConversationLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Chatgpt35TurboConversationLog entities.
func (c *Chatgpt35TurboConversationLogClient) CreateBulk(builders ...*Chatgpt35TurboConversationLogCreate) *Chatgpt35TurboConversationLogCreateBulk {
	return &Chatgpt35TurboConversationLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Chatgpt35TurboConversationLog.
func (c *Chatgpt35TurboConversationLogClient) Update() *Chatgpt35TurboConversationLogUpdate {
	mutation := newChatgpt35TurboConversationLogMutation(c.config, OpUpdate)
	return &Chatgpt35TurboConversationLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *Chatgpt35TurboConversationLogClient) UpdateOne(ccl *Chatgpt35TurboConversationLog) *Chatgpt35TurboConversationLogUpdateOne {
	mutation := newChatgpt35TurboConversationLogMutation(c.config, OpUpdateOne, withChatgpt35TurboConversationLog(ccl))
	return &Chatgpt35TurboConversationLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *Chatgpt35TurboConversationLogClient) UpdateOneID(id int) *Chatgpt35TurboConversationLogUpdateOne {
	mutation := newChatgpt35TurboConversationLogMutation(c.config, OpUpdateOne, withChatgpt35TurboConversationLogID(id))
	return &Chatgpt35TurboConversationLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Chatgpt35TurboConversationLog.
func (c *Chatgpt35TurboConversationLogClient) Delete() *Chatgpt35TurboConversationLogDelete {
	mutation := newChatgpt35TurboConversationLogMutation(c.config, OpDelete)
	return &Chatgpt35TurboConversationLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *Chatgpt35TurboConversationLogClient) DeleteOne(ccl *Chatgpt35TurboConversationLog) *Chatgpt35TurboConversationLogDeleteOne {
	return c.DeleteOneID(ccl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *Chatgpt35TurboConversationLogClient) DeleteOneID(id int) *Chatgpt35TurboConversationLogDeleteOne {
	builder := c.Delete().Where(chatgpt35turboconversationlog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &Chatgpt35TurboConversationLogDeleteOne{builder}
}

// Query returns a query builder for Chatgpt35TurboConversationLog.
func (c *Chatgpt35TurboConversationLogClient) Query() *Chatgpt35TurboConversationLogQuery {
	return &Chatgpt35TurboConversationLogQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeChatgpt35TurboConversationLog},
		inters: c.Interceptors(),
	}
}

// Get returns a Chatgpt35TurboConversationLog entity by its id.
func (c *Chatgpt35TurboConversationLogClient) Get(ctx context.Context, id int) (*Chatgpt35TurboConversationLog, error) {
	return c.Query().Where(chatgpt35turboconversationlog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *Chatgpt35TurboConversationLogClient) GetX(ctx context.Context, id int) *Chatgpt35TurboConversationLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryConversation queries the conversation edge of a Chatgpt35TurboConversationLog.
func (c *Chatgpt35TurboConversationLogClient) QueryConversation(ccl *Chatgpt35TurboConversationLog) *ConversationsQuery {
	query := (&ConversationsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ccl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(chatgpt35turboconversationlog.Table, chatgpt35turboconversationlog.FieldID, id),
			sqlgraph.To(conversations.Table, conversations.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, chatgpt35turboconversationlog.ConversationTable, chatgpt35turboconversationlog.ConversationColumn),
		)
		fromV = sqlgraph.Neighbors(ccl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *Chatgpt35TurboConversationLogClient) Hooks() []Hook {
	return c.hooks.Chatgpt35TurboConversationLog
}

// Interceptors returns the client interceptors.
func (c *Chatgpt35TurboConversationLogClient) Interceptors() []Interceptor {
	return c.inters.Chatgpt35TurboConversationLog
}

func (c *Chatgpt35TurboConversationLogClient) mutate(ctx context.Context, m *Chatgpt35TurboConversationLogMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&Chatgpt35TurboConversationLogCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&Chatgpt35TurboConversationLogUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&Chatgpt35TurboConversationLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&Chatgpt35TurboConversationLogDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Chatgpt35TurboConversationLog mutation op: %q", m.Op())
	}
}

// ConversationsClient is a client for the Conversations schema.
type ConversationsClient struct {
	config
}

// NewConversationsClient returns a client for the Conversations from the given config.
func NewConversationsClient(c config) *ConversationsClient {
	return &ConversationsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `conversations.Hooks(f(g(h())))`.
func (c *ConversationsClient) Use(hooks ...Hook) {
	c.hooks.Conversations = append(c.hooks.Conversations, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `conversations.Intercept(f(g(h())))`.
func (c *ConversationsClient) Intercept(interceptors ...Interceptor) {
	c.inters.Conversations = append(c.inters.Conversations, interceptors...)
}

// Create returns a builder for creating a Conversations entity.
func (c *ConversationsClient) Create() *ConversationsCreate {
	mutation := newConversationsMutation(c.config, OpCreate)
	return &ConversationsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Conversations entities.
func (c *ConversationsClient) CreateBulk(builders ...*ConversationsCreate) *ConversationsCreateBulk {
	return &ConversationsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Conversations.
func (c *ConversationsClient) Update() *ConversationsUpdate {
	mutation := newConversationsMutation(c.config, OpUpdate)
	return &ConversationsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ConversationsClient) UpdateOne(co *Conversations) *ConversationsUpdateOne {
	mutation := newConversationsMutation(c.config, OpUpdateOne, withConversations(co))
	return &ConversationsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ConversationsClient) UpdateOneID(id int) *ConversationsUpdateOne {
	mutation := newConversationsMutation(c.config, OpUpdateOne, withConversationsID(id))
	return &ConversationsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Conversations.
func (c *ConversationsClient) Delete() *ConversationsDelete {
	mutation := newConversationsMutation(c.config, OpDelete)
	return &ConversationsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ConversationsClient) DeleteOne(co *Conversations) *ConversationsDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ConversationsClient) DeleteOneID(id int) *ConversationsDeleteOne {
	builder := c.Delete().Where(conversations.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ConversationsDeleteOne{builder}
}

// Query returns a query builder for Conversations.
func (c *ConversationsClient) Query() *ConversationsQuery {
	return &ConversationsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeConversations},
		inters: c.Interceptors(),
	}
}

// Get returns a Conversations entity by its id.
func (c *ConversationsClient) Get(ctx context.Context, id int) (*Conversations, error) {
	return c.Query().Where(conversations.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ConversationsClient) GetX(ctx context.Context, id int) *Conversations {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ConversationsClient) Hooks() []Hook {
	return c.hooks.Conversations
}

// Interceptors returns the client interceptors.
func (c *ConversationsClient) Interceptors() []Interceptor {
	return c.inters.Conversations
}

func (c *ConversationsClient) mutate(ctx context.Context, m *ConversationsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ConversationsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ConversationsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ConversationsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ConversationsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Conversations mutation op: %q", m.Op())
	}
}

// TwitterAccountsClient is a client for the TwitterAccounts schema.
type TwitterAccountsClient struct {
	config
}

// NewTwitterAccountsClient returns a client for the TwitterAccounts from the given config.
func NewTwitterAccountsClient(c config) *TwitterAccountsClient {
	return &TwitterAccountsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `twitteraccounts.Hooks(f(g(h())))`.
func (c *TwitterAccountsClient) Use(hooks ...Hook) {
	c.hooks.TwitterAccounts = append(c.hooks.TwitterAccounts, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `twitteraccounts.Intercept(f(g(h())))`.
func (c *TwitterAccountsClient) Intercept(interceptors ...Interceptor) {
	c.inters.TwitterAccounts = append(c.inters.TwitterAccounts, interceptors...)
}

// Create returns a builder for creating a TwitterAccounts entity.
func (c *TwitterAccountsClient) Create() *TwitterAccountsCreate {
	mutation := newTwitterAccountsMutation(c.config, OpCreate)
	return &TwitterAccountsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TwitterAccounts entities.
func (c *TwitterAccountsClient) CreateBulk(builders ...*TwitterAccountsCreate) *TwitterAccountsCreateBulk {
	return &TwitterAccountsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TwitterAccounts.
func (c *TwitterAccountsClient) Update() *TwitterAccountsUpdate {
	mutation := newTwitterAccountsMutation(c.config, OpUpdate)
	return &TwitterAccountsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TwitterAccountsClient) UpdateOne(ta *TwitterAccounts) *TwitterAccountsUpdateOne {
	mutation := newTwitterAccountsMutation(c.config, OpUpdateOne, withTwitterAccounts(ta))
	return &TwitterAccountsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TwitterAccountsClient) UpdateOneID(id int) *TwitterAccountsUpdateOne {
	mutation := newTwitterAccountsMutation(c.config, OpUpdateOne, withTwitterAccountsID(id))
	return &TwitterAccountsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TwitterAccounts.
func (c *TwitterAccountsClient) Delete() *TwitterAccountsDelete {
	mutation := newTwitterAccountsMutation(c.config, OpDelete)
	return &TwitterAccountsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TwitterAccountsClient) DeleteOne(ta *TwitterAccounts) *TwitterAccountsDeleteOne {
	return c.DeleteOneID(ta.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TwitterAccountsClient) DeleteOneID(id int) *TwitterAccountsDeleteOne {
	builder := c.Delete().Where(twitteraccounts.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TwitterAccountsDeleteOne{builder}
}

// Query returns a query builder for TwitterAccounts.
func (c *TwitterAccountsClient) Query() *TwitterAccountsQuery {
	return &TwitterAccountsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTwitterAccounts},
		inters: c.Interceptors(),
	}
}

// Get returns a TwitterAccounts entity by its id.
func (c *TwitterAccountsClient) Get(ctx context.Context, id int) (*TwitterAccounts, error) {
	return c.Query().Where(twitteraccounts.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TwitterAccountsClient) GetX(ctx context.Context, id int) *TwitterAccounts {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryConversation queries the conversation edge of a TwitterAccounts.
func (c *TwitterAccountsClient) QueryConversation(ta *TwitterAccounts) *ConversationsQuery {
	query := (&ConversationsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ta.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(twitteraccounts.Table, twitteraccounts.FieldID, id),
			sqlgraph.To(conversations.Table, conversations.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, twitteraccounts.ConversationTable, twitteraccounts.ConversationColumn),
		)
		fromV = sqlgraph.Neighbors(ta.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TwitterAccountsClient) Hooks() []Hook {
	return c.hooks.TwitterAccounts
}

// Interceptors returns the client interceptors.
func (c *TwitterAccountsClient) Interceptors() []Interceptor {
	return c.inters.TwitterAccounts
}

func (c *TwitterAccountsClient) mutate(ctx context.Context, m *TwitterAccountsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TwitterAccountsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TwitterAccountsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TwitterAccountsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TwitterAccountsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TwitterAccounts mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Chatgpt35TurboConversationLog, Conversations, TwitterAccounts []ent.Hook
	}
	inters struct {
		Chatgpt35TurboConversationLog, Conversations, TwitterAccounts []ent.Interceptor
	}
)
