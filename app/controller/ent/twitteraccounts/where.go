// Code generated by ent, DO NOT EDIT.

package twitteraccounts

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/YukiTsuchida/conversational-ai-sns-bot/app/controller/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldLTE(FieldID, id))
}

// TwitterAccountID applies equality check predicate on the "twitter_account_id" field. It's identical to TwitterAccountIDEQ.
func TwitterAccountID(v string) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldEQ(FieldTwitterAccountID, v))
}

// BearerToken applies equality check predicate on the "bearer_token" field. It's identical to BearerTokenEQ.
func BearerToken(v string) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldEQ(FieldBearerToken, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldEQ(FieldUpdatedAt, v))
}

// TwitterAccountIDEQ applies the EQ predicate on the "twitter_account_id" field.
func TwitterAccountIDEQ(v string) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldEQ(FieldTwitterAccountID, v))
}

// TwitterAccountIDNEQ applies the NEQ predicate on the "twitter_account_id" field.
func TwitterAccountIDNEQ(v string) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldNEQ(FieldTwitterAccountID, v))
}

// TwitterAccountIDIn applies the In predicate on the "twitter_account_id" field.
func TwitterAccountIDIn(vs ...string) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldIn(FieldTwitterAccountID, vs...))
}

// TwitterAccountIDNotIn applies the NotIn predicate on the "twitter_account_id" field.
func TwitterAccountIDNotIn(vs ...string) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldNotIn(FieldTwitterAccountID, vs...))
}

// TwitterAccountIDGT applies the GT predicate on the "twitter_account_id" field.
func TwitterAccountIDGT(v string) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldGT(FieldTwitterAccountID, v))
}

// TwitterAccountIDGTE applies the GTE predicate on the "twitter_account_id" field.
func TwitterAccountIDGTE(v string) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldGTE(FieldTwitterAccountID, v))
}

// TwitterAccountIDLT applies the LT predicate on the "twitter_account_id" field.
func TwitterAccountIDLT(v string) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldLT(FieldTwitterAccountID, v))
}

// TwitterAccountIDLTE applies the LTE predicate on the "twitter_account_id" field.
func TwitterAccountIDLTE(v string) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldLTE(FieldTwitterAccountID, v))
}

// TwitterAccountIDContains applies the Contains predicate on the "twitter_account_id" field.
func TwitterAccountIDContains(v string) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldContains(FieldTwitterAccountID, v))
}

// TwitterAccountIDHasPrefix applies the HasPrefix predicate on the "twitter_account_id" field.
func TwitterAccountIDHasPrefix(v string) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldHasPrefix(FieldTwitterAccountID, v))
}

// TwitterAccountIDHasSuffix applies the HasSuffix predicate on the "twitter_account_id" field.
func TwitterAccountIDHasSuffix(v string) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldHasSuffix(FieldTwitterAccountID, v))
}

// TwitterAccountIDEqualFold applies the EqualFold predicate on the "twitter_account_id" field.
func TwitterAccountIDEqualFold(v string) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldEqualFold(FieldTwitterAccountID, v))
}

// TwitterAccountIDContainsFold applies the ContainsFold predicate on the "twitter_account_id" field.
func TwitterAccountIDContainsFold(v string) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldContainsFold(FieldTwitterAccountID, v))
}

// BearerTokenEQ applies the EQ predicate on the "bearer_token" field.
func BearerTokenEQ(v string) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldEQ(FieldBearerToken, v))
}

// BearerTokenNEQ applies the NEQ predicate on the "bearer_token" field.
func BearerTokenNEQ(v string) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldNEQ(FieldBearerToken, v))
}

// BearerTokenIn applies the In predicate on the "bearer_token" field.
func BearerTokenIn(vs ...string) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldIn(FieldBearerToken, vs...))
}

// BearerTokenNotIn applies the NotIn predicate on the "bearer_token" field.
func BearerTokenNotIn(vs ...string) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldNotIn(FieldBearerToken, vs...))
}

// BearerTokenGT applies the GT predicate on the "bearer_token" field.
func BearerTokenGT(v string) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldGT(FieldBearerToken, v))
}

// BearerTokenGTE applies the GTE predicate on the "bearer_token" field.
func BearerTokenGTE(v string) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldGTE(FieldBearerToken, v))
}

// BearerTokenLT applies the LT predicate on the "bearer_token" field.
func BearerTokenLT(v string) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldLT(FieldBearerToken, v))
}

// BearerTokenLTE applies the LTE predicate on the "bearer_token" field.
func BearerTokenLTE(v string) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldLTE(FieldBearerToken, v))
}

// BearerTokenContains applies the Contains predicate on the "bearer_token" field.
func BearerTokenContains(v string) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldContains(FieldBearerToken, v))
}

// BearerTokenHasPrefix applies the HasPrefix predicate on the "bearer_token" field.
func BearerTokenHasPrefix(v string) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldHasPrefix(FieldBearerToken, v))
}

// BearerTokenHasSuffix applies the HasSuffix predicate on the "bearer_token" field.
func BearerTokenHasSuffix(v string) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldHasSuffix(FieldBearerToken, v))
}

// BearerTokenEqualFold applies the EqualFold predicate on the "bearer_token" field.
func BearerTokenEqualFold(v string) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldEqualFold(FieldBearerToken, v))
}

// BearerTokenContainsFold applies the ContainsFold predicate on the "bearer_token" field.
func BearerTokenContainsFold(v string) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldContainsFold(FieldBearerToken, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasConversation applies the HasEdge predicate on the "conversation" edge.
func HasConversation() predicate.TwitterAccounts {
	return predicate.TwitterAccounts(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ConversationTable, ConversationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConversationWith applies the HasEdge predicate on the "conversation" edge with a given conditions (other predicates).
func HasConversationWith(preds ...predicate.Conversations) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(func(s *sql.Selector) {
		step := newConversationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TwitterAccounts) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TwitterAccounts) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TwitterAccounts) predicate.TwitterAccounts {
	return predicate.TwitterAccounts(func(s *sql.Selector) {
		p(s.Not())
	})
}
