// Code generated by ent, DO NOT EDIT.

package twitteraccounts

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the twitteraccounts type in the database.
	Label = "twitter_accounts"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTwitterAccountID holds the string denoting the twitter_account_id field in the database.
	FieldTwitterAccountID = "twitter_account_id"
	// FieldBearerToken holds the string denoting the bearer_token field in the database.
	FieldBearerToken = "bearer_token"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeConversation holds the string denoting the conversation edge name in mutations.
	EdgeConversation = "conversation"
	// Table holds the table name of the twitteraccounts in the database.
	Table = "twitter_accounts"
	// ConversationTable is the table that holds the conversation relation/edge.
	ConversationTable = "conversations"
	// ConversationInverseTable is the table name for the Conversations entity.
	// It exists in this package in order to avoid circular dependency with the "conversations" package.
	ConversationInverseTable = "conversations"
	// ConversationColumn is the table column denoting the conversation relation/edge.
	ConversationColumn = "twitter_accounts_conversation"
)

// Columns holds all SQL columns for twitteraccounts fields.
var Columns = []string{
	FieldID,
	FieldTwitterAccountID,
	FieldBearerToken,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TwitterAccountIDValidator is a validator for the "twitter_account_id" field. It is called by the builders before save.
	TwitterAccountIDValidator func(string) error
	// BearerTokenValidator is a validator for the "bearer_token" field. It is called by the builders before save.
	BearerTokenValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the TwitterAccounts queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTwitterAccountID orders the results by the twitter_account_id field.
func ByTwitterAccountID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTwitterAccountID, opts...).ToFunc()
}

// ByBearerToken orders the results by the bearer_token field.
func ByBearerToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBearerToken, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByConversationField orders the results by conversation field.
func ByConversationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newConversationStep(), sql.OrderByField(field, opts...))
	}
}
func newConversationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ConversationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ConversationTable, ConversationColumn),
	)
}
