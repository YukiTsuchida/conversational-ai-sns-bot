// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/YukiTsuchida/conversational-ai-sns-bot/app/controller/ent/conversations"
	"github.com/YukiTsuchida/conversational-ai-sns-bot/app/controller/ent/predicate"
	"github.com/YukiTsuchida/conversational-ai-sns-bot/app/controller/ent/twitteraccounts"
)

// TwitterAccountsUpdate is the builder for updating TwitterAccounts entities.
type TwitterAccountsUpdate struct {
	config
	hooks    []Hook
	mutation *TwitterAccountsMutation
}

// Where appends a list predicates to the TwitterAccountsUpdate builder.
func (tau *TwitterAccountsUpdate) Where(ps ...predicate.TwitterAccounts) *TwitterAccountsUpdate {
	tau.mutation.Where(ps...)
	return tau
}

// SetTwitterAccountID sets the "twitter_account_id" field.
func (tau *TwitterAccountsUpdate) SetTwitterAccountID(s string) *TwitterAccountsUpdate {
	tau.mutation.SetTwitterAccountID(s)
	return tau
}

// SetBearerToken sets the "bearer_token" field.
func (tau *TwitterAccountsUpdate) SetBearerToken(s string) *TwitterAccountsUpdate {
	tau.mutation.SetBearerToken(s)
	return tau
}

// SetCreatedAt sets the "created_at" field.
func (tau *TwitterAccountsUpdate) SetCreatedAt(t time.Time) *TwitterAccountsUpdate {
	tau.mutation.SetCreatedAt(t)
	return tau
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tau *TwitterAccountsUpdate) SetNillableCreatedAt(t *time.Time) *TwitterAccountsUpdate {
	if t != nil {
		tau.SetCreatedAt(*t)
	}
	return tau
}

// SetUpdatedAt sets the "updated_at" field.
func (tau *TwitterAccountsUpdate) SetUpdatedAt(t time.Time) *TwitterAccountsUpdate {
	tau.mutation.SetUpdatedAt(t)
	return tau
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tau *TwitterAccountsUpdate) SetNillableUpdatedAt(t *time.Time) *TwitterAccountsUpdate {
	if t != nil {
		tau.SetUpdatedAt(*t)
	}
	return tau
}

// SetConversationID sets the "conversation" edge to the Conversations entity by ID.
func (tau *TwitterAccountsUpdate) SetConversationID(id int) *TwitterAccountsUpdate {
	tau.mutation.SetConversationID(id)
	return tau
}

// SetNillableConversationID sets the "conversation" edge to the Conversations entity by ID if the given value is not nil.
func (tau *TwitterAccountsUpdate) SetNillableConversationID(id *int) *TwitterAccountsUpdate {
	if id != nil {
		tau = tau.SetConversationID(*id)
	}
	return tau
}

// SetConversation sets the "conversation" edge to the Conversations entity.
func (tau *TwitterAccountsUpdate) SetConversation(c *Conversations) *TwitterAccountsUpdate {
	return tau.SetConversationID(c.ID)
}

// Mutation returns the TwitterAccountsMutation object of the builder.
func (tau *TwitterAccountsUpdate) Mutation() *TwitterAccountsMutation {
	return tau.mutation
}

// ClearConversation clears the "conversation" edge to the Conversations entity.
func (tau *TwitterAccountsUpdate) ClearConversation() *TwitterAccountsUpdate {
	tau.mutation.ClearConversation()
	return tau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tau *TwitterAccountsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tau.sqlSave, tau.mutation, tau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tau *TwitterAccountsUpdate) SaveX(ctx context.Context) int {
	affected, err := tau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tau *TwitterAccountsUpdate) Exec(ctx context.Context) error {
	_, err := tau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tau *TwitterAccountsUpdate) ExecX(ctx context.Context) {
	if err := tau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tau *TwitterAccountsUpdate) check() error {
	if v, ok := tau.mutation.TwitterAccountID(); ok {
		if err := twitteraccounts.TwitterAccountIDValidator(v); err != nil {
			return &ValidationError{Name: "twitter_account_id", err: fmt.Errorf(`ent: validator failed for field "TwitterAccounts.twitter_account_id": %w`, err)}
		}
	}
	if v, ok := tau.mutation.BearerToken(); ok {
		if err := twitteraccounts.BearerTokenValidator(v); err != nil {
			return &ValidationError{Name: "bearer_token", err: fmt.Errorf(`ent: validator failed for field "TwitterAccounts.bearer_token": %w`, err)}
		}
	}
	return nil
}

func (tau *TwitterAccountsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(twitteraccounts.Table, twitteraccounts.Columns, sqlgraph.NewFieldSpec(twitteraccounts.FieldID, field.TypeInt))
	if ps := tau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tau.mutation.TwitterAccountID(); ok {
		_spec.SetField(twitteraccounts.FieldTwitterAccountID, field.TypeString, value)
	}
	if value, ok := tau.mutation.BearerToken(); ok {
		_spec.SetField(twitteraccounts.FieldBearerToken, field.TypeString, value)
	}
	if value, ok := tau.mutation.CreatedAt(); ok {
		_spec.SetField(twitteraccounts.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tau.mutation.UpdatedAt(); ok {
		_spec.SetField(twitteraccounts.FieldUpdatedAt, field.TypeTime, value)
	}
	if tau.mutation.ConversationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   twitteraccounts.ConversationTable,
			Columns: []string{twitteraccounts.ConversationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversations.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tau.mutation.ConversationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   twitteraccounts.ConversationTable,
			Columns: []string{twitteraccounts.ConversationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversations.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{twitteraccounts.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tau.mutation.done = true
	return n, nil
}

// TwitterAccountsUpdateOne is the builder for updating a single TwitterAccounts entity.
type TwitterAccountsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TwitterAccountsMutation
}

// SetTwitterAccountID sets the "twitter_account_id" field.
func (tauo *TwitterAccountsUpdateOne) SetTwitterAccountID(s string) *TwitterAccountsUpdateOne {
	tauo.mutation.SetTwitterAccountID(s)
	return tauo
}

// SetBearerToken sets the "bearer_token" field.
func (tauo *TwitterAccountsUpdateOne) SetBearerToken(s string) *TwitterAccountsUpdateOne {
	tauo.mutation.SetBearerToken(s)
	return tauo
}

// SetCreatedAt sets the "created_at" field.
func (tauo *TwitterAccountsUpdateOne) SetCreatedAt(t time.Time) *TwitterAccountsUpdateOne {
	tauo.mutation.SetCreatedAt(t)
	return tauo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tauo *TwitterAccountsUpdateOne) SetNillableCreatedAt(t *time.Time) *TwitterAccountsUpdateOne {
	if t != nil {
		tauo.SetCreatedAt(*t)
	}
	return tauo
}

// SetUpdatedAt sets the "updated_at" field.
func (tauo *TwitterAccountsUpdateOne) SetUpdatedAt(t time.Time) *TwitterAccountsUpdateOne {
	tauo.mutation.SetUpdatedAt(t)
	return tauo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tauo *TwitterAccountsUpdateOne) SetNillableUpdatedAt(t *time.Time) *TwitterAccountsUpdateOne {
	if t != nil {
		tauo.SetUpdatedAt(*t)
	}
	return tauo
}

// SetConversationID sets the "conversation" edge to the Conversations entity by ID.
func (tauo *TwitterAccountsUpdateOne) SetConversationID(id int) *TwitterAccountsUpdateOne {
	tauo.mutation.SetConversationID(id)
	return tauo
}

// SetNillableConversationID sets the "conversation" edge to the Conversations entity by ID if the given value is not nil.
func (tauo *TwitterAccountsUpdateOne) SetNillableConversationID(id *int) *TwitterAccountsUpdateOne {
	if id != nil {
		tauo = tauo.SetConversationID(*id)
	}
	return tauo
}

// SetConversation sets the "conversation" edge to the Conversations entity.
func (tauo *TwitterAccountsUpdateOne) SetConversation(c *Conversations) *TwitterAccountsUpdateOne {
	return tauo.SetConversationID(c.ID)
}

// Mutation returns the TwitterAccountsMutation object of the builder.
func (tauo *TwitterAccountsUpdateOne) Mutation() *TwitterAccountsMutation {
	return tauo.mutation
}

// ClearConversation clears the "conversation" edge to the Conversations entity.
func (tauo *TwitterAccountsUpdateOne) ClearConversation() *TwitterAccountsUpdateOne {
	tauo.mutation.ClearConversation()
	return tauo
}

// Where appends a list predicates to the TwitterAccountsUpdate builder.
func (tauo *TwitterAccountsUpdateOne) Where(ps ...predicate.TwitterAccounts) *TwitterAccountsUpdateOne {
	tauo.mutation.Where(ps...)
	return tauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tauo *TwitterAccountsUpdateOne) Select(field string, fields ...string) *TwitterAccountsUpdateOne {
	tauo.fields = append([]string{field}, fields...)
	return tauo
}

// Save executes the query and returns the updated TwitterAccounts entity.
func (tauo *TwitterAccountsUpdateOne) Save(ctx context.Context) (*TwitterAccounts, error) {
	return withHooks(ctx, tauo.sqlSave, tauo.mutation, tauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tauo *TwitterAccountsUpdateOne) SaveX(ctx context.Context) *TwitterAccounts {
	node, err := tauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tauo *TwitterAccountsUpdateOne) Exec(ctx context.Context) error {
	_, err := tauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tauo *TwitterAccountsUpdateOne) ExecX(ctx context.Context) {
	if err := tauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tauo *TwitterAccountsUpdateOne) check() error {
	if v, ok := tauo.mutation.TwitterAccountID(); ok {
		if err := twitteraccounts.TwitterAccountIDValidator(v); err != nil {
			return &ValidationError{Name: "twitter_account_id", err: fmt.Errorf(`ent: validator failed for field "TwitterAccounts.twitter_account_id": %w`, err)}
		}
	}
	if v, ok := tauo.mutation.BearerToken(); ok {
		if err := twitteraccounts.BearerTokenValidator(v); err != nil {
			return &ValidationError{Name: "bearer_token", err: fmt.Errorf(`ent: validator failed for field "TwitterAccounts.bearer_token": %w`, err)}
		}
	}
	return nil
}

func (tauo *TwitterAccountsUpdateOne) sqlSave(ctx context.Context) (_node *TwitterAccounts, err error) {
	if err := tauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(twitteraccounts.Table, twitteraccounts.Columns, sqlgraph.NewFieldSpec(twitteraccounts.FieldID, field.TypeInt))
	id, ok := tauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TwitterAccounts.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, twitteraccounts.FieldID)
		for _, f := range fields {
			if !twitteraccounts.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != twitteraccounts.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tauo.mutation.TwitterAccountID(); ok {
		_spec.SetField(twitteraccounts.FieldTwitterAccountID, field.TypeString, value)
	}
	if value, ok := tauo.mutation.BearerToken(); ok {
		_spec.SetField(twitteraccounts.FieldBearerToken, field.TypeString, value)
	}
	if value, ok := tauo.mutation.CreatedAt(); ok {
		_spec.SetField(twitteraccounts.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tauo.mutation.UpdatedAt(); ok {
		_spec.SetField(twitteraccounts.FieldUpdatedAt, field.TypeTime, value)
	}
	if tauo.mutation.ConversationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   twitteraccounts.ConversationTable,
			Columns: []string{twitteraccounts.ConversationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversations.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tauo.mutation.ConversationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   twitteraccounts.ConversationTable,
			Columns: []string{twitteraccounts.ConversationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversations.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TwitterAccounts{config: tauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{twitteraccounts.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tauo.mutation.done = true
	return _node, nil
}
